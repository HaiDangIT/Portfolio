// import { meta, shopify, starbucks, tesla } from "../assets/images";
import {
  car,
  contact,
  css,
  estate,
  express,
  git,
  github,
  html,
  javascript,
  linkedin,
  facebook,
  discord,
  mongodb,
  motion,
  mui,
  nextjs,
  nodejs,
  pricewise,
  react,
  redux,
  sass,
  snapgram,
  summiz,
  tailwindcss,
  threads,
  typescript,
} from "../assets/icons";
import {
  chungchi1,
  chungchi2,
  chungchi3,
  portfolioPreview,
  gamePreview,
  skillcoderPreview,
  rentalPreview,
  studentPreview,
  musicPreview,
} from "../assets/images";

export const skills = [
  {
    imageUrl: css,
    name: "CSS",
    type: "Frontend",
  },
  {
    imageUrl: express,
    name: "Express",
    type: "Backend",
  },
  {
    imageUrl: git,
    name: "Git",
    type: "Version Control",
  },
  {
    imageUrl: github,
    name: "GitHub",
    type: "Version Control",
  },
  {
    imageUrl: html,
    name: "HTML",
    type: "Frontend",
  },
  {
    imageUrl: javascript,
    name: "JavaScript",
    type: "Frontend",
  },
  {
    imageUrl: nodejs,
    name: "Node.js",
    type: "Backend",
  },
  {
    imageUrl: react,
    name: "React",
    type: "Frontend",
  },
  {
    imageUrl: tailwindcss,
    name: "Tailwind CSS",
    type: "Frontend",
  },
  {
    imageUrl: typescript,
    name: "TypeScript",
    type: "Frontend",
  },
];

export const experiences = [
  {
    title: "React.js Developer",
    company_name: "Starbucks",
    icon: "", // placeholder - add icon later
    iconBg: "#accbe1",
    date: "March 2020 - April 2021",
    points: [
      "Developing and maintaining web applications using React.js and other related technologies.",
      "Collaborating with cross-functional teams including designers, product managers, and other developers to create high-quality products.",
      "Implementing responsive design and ensuring cross-browser compatibility.",
      "Participating in code reviews and providing constructive feedback to other developers.",
    ],
  },
  {
    title: "React Native Developer",
    company_name: "Tesla",
    icon: "", // placeholder - add icon later
    iconBg: "#fbc3bc",
    date: "Jan 2021 - Feb 2022",
    points: [
      "Developing and maintaining web applications using React.js and other related technologies.",
      "Collaborating with cross-functional teams including designers, product managers, and other developers to create high-quality products.",
      "Implementing responsive design and ensuring cross-browser compatibility.",
      "Participating in code reviews and providing constructive feedback to other developers.",
    ],
  },
  {
    title: "Web Developer",
    company_name: "Shopify",
    icon: "", // placeholder - add icon later
    iconBg: "#b7e4c7",
    date: "Jan 2022 - Jan 2023",
    points: [
      "Developing and maintaining web applications using React.js and other related technologies.",
      "Collaborating with cross-functional teams including designers, product managers, and other developers to create high-quality products.",
      "Implementing responsive design and ensuring cross-browser compatibility.",
      "Participating in code reviews and providing constructive feedback to other developers.",
    ],
  },
  {
    title: "Full stack Developer",
    company_name: "Meta",
    icon: "", // placeholder - add icon later
    iconBg: "#a2d2ff",
    date: "Jan 2023 - Present",
    points: [
      "Developing and maintaining web applications using React.js and other related technologies.",
      "Collaborating with cross-functional teams including designers, product managers, and other developers to create high-quality products.",
      "Implementing responsive design and ensuring cross-browser compatibility.",
      "Participating in code reviews and providing constructive feedback to other developers.",
    ],
  },
];

export const education = {
  school: "ƒê·∫°i h·ªçc C√¥ng ngh·ªá TP.HCM",
  degree: "C·ª≠ nh√¢n C√¥ng ngh·ªá Th√¥ng tin",
  period: "2022 - Hi·ªán t·∫°i",
  description: "Chuy√™n ng√†nh: C√¥ng ngh·ªá Ph·∫ßn m·ªÅm",
};

export const certificates = [
  {
    id: 1,
    image: chungchi1,
    title: "Ch·ª©ng ch·ªâ Networking Basics",
    issuer: "Cisco Networking Academy",
    date: "Th√°ng 9, 2025",
    description: "Ho√†n th√†nh kh√≥a h·ªçc Networking Basics",
  },
  {
    id: 2,
    image: chungchi2,
    title: "Ch·ª©ng ch·ªâ Javascript 1",
    issuer: "Cisco Networking Academy",
    date: "Th√°ng 9, 2025",
    description: "Ch·ª©ng nh·∫≠n k·ªπ nƒÉng ph√°t tri·ªÉn v·ªõi Javascript 1",
  },
  {
    id: 3,
    image: chungchi3,
    title: "Ch·ª©ng ch·ªâ Javascript 2",
    issuer: "Cisco Networking Academy",
    date: "Th√°ng 9, 2025",
    description: "Ch·ª©ng nh·∫≠n k·ªπ nƒÉng ph√°t tri·ªÉn v·ªõi Javascript 2",
  },
];

export const journey = [
  {
    year: "2022",
    title: "Kh·ªüi ƒë·∫ßu h√†nh tr√¨nh",
    description:
      "B·∫Øt ƒë·∫ßu h·ªçc l·∫≠p tr√¨nh v·ªõi HTML, CSS v√† JavaScript c∆° b·∫£n. T·∫°o ra nh·ªØng website ƒë·∫ßu ti√™n v√† kh√°m ph√° ƒëam m√™ v·ªõi c√¥ng ngh·ªá.",
    icon: "üöÄ",
  },
  {
    year: "2023",
    title: "Ph√°t tri·ªÉn k·ªπ nƒÉng",
    description:
      "Chuy√™n s√¢u v√†o React, Node.js v√† PosgreSQL. Ho√†n th√†nh nhi·ªÅu d·ª± √°n th·ª±c t·∫ø v√† nh·∫≠n ƒë∆∞·ª£c c√°c ch·ª©ng ch·ªâ chuy√™n m√¥n.",
    icon: "üìö",
  },
  {
    year: "2024",
    title: "M·ªü r·ªông ki·∫øn th·ª©c",
    description:
      "H·ªçc v·ªÅ ki·∫øn tr√∫c h·ªá th·ªëng, microservices v√† c√°c c√¥ng ngh·ªá cloud. Tham gia c√°c d·ª± √°n nh√≥m v√† ƒë√≥ng g√≥p cho c·ªông ƒë·ªìng open-source.",
    icon: "üéØ",
  },
  {
    year: "2025",
    title: "Ti·∫øp t·ª•c ph√°t tri·ªÉn",
    description:
      "Ho√†n thi·ªán k·ªπ nƒÉng Backend, h·ªçc v·ªÅ AI/ML v√† x√¢y d·ª±ng portfolio chuy√™n nghi·ªáp. Chu·∫©n b·ªã cho s·ª± nghi·ªáp trong ng√†nh c√¥ng ngh·ªá.",
    icon: "‚ú®",
  },
];

export const hobbies = [
  {
    title: "Ch∆°i Game C·ªët Truy·ªán",
    description:
      "ƒêam m√™ c√°c game RPG v√† adventure c√≥ c√¢u chuy·ªán s√¢u s·∫Øc nh∆∞ The Witcher 3, Red Dead Redemption 2, God of War. T√¥i y√™u th√≠ch vi·ªác kh√°m ph√° th·∫ø gi·ªõi game, ph√¢n t√≠ch c·ªët truy·ªán ph·ª©c t·∫°p v√† tr·∫£i nghi·ªám nh·ªØng h√†nh tr√¨nh ri√™ng c·ªßa m·ªói nh√¢n v·∫≠t.",
    icon: "üéÆ",
    examples: [
      "The Witcher 3",
      "Red Dead Redemption 2",
      "God of War",
      "Cyberpunk 2077",
    ],
  },
  {
    title: "Coding & H·ªçc H·ªèi",
    description:
      "L·∫≠p tr√¨nh kh√¥ng ch·ªâ l√† c√¥ng vi·ªác m√† c√≤n l√† s·ªü th√≠ch. T√¥i th√≠ch kh√°m ph√° c√°c c√¥ng ngh·ªá m·ªõi, gi·∫£i quy·∫øt c√°c b√†i to√°n thu·∫≠t to√°n, ƒë√≥ng g√≥p cho open-source v√† x√¢y d·ª±ng c√°c side projects s√°ng t·∫°o.",
    icon: "üíª",
    examples: ["Open Source", "Algorithm", "Side Projects", "Tech Blogs"],
  },
];

export const goals = [
  {
    title: "Ng·∫Øn h·∫°n (1-2 nƒÉm)",
    items: [
      "Ho√†n th√†nh xu·∫•t s·∫Øc ch∆∞∆°ng tr√¨nh ƒë·∫°i h·ªçc v·ªõi GPA cao",
      "Tr·ªü th√†nh Backend Developer th√†nh th·∫°o v·ªõi React, Node.js, v√† cloud technologies",
      "ƒê√≥ng g√≥p t√≠ch c·ª±c v√†o c√°c d·ª± √°n open-source l·ªõn",
      "X√¢y d·ª±ng portfolio v·ªõi √≠t nh·∫•t 5 d·ª± √°n th·ª±c t·∫ø c√≥ gi√° tr·ªã",
    ],
    icon: "üéØ",
  },
  {
    title: "D√†i h·∫°n (3-5 nƒÉm)",
    items: [
      "Tr·ªü th√†nh Senior Software Engineer t·∫°i c√¥ng ty c√¥ng ngh·ªá h√†ng ƒë·∫ßu",
      "Chuy√™n s√¢u v·ªÅ ki·∫øn tr√∫c h·ªá th·ªëng ph√¢n t√°n v√† microservices",
      "H·ªçc v√† ·ª©ng d·ª•ng AI/Machine Learning v√†o c√°c s·∫£n ph·∫©m th·ª±c t·∫ø",
      "Chia s·∫ª ki·∫øn th·ª©c qua blog, YouTube v√† c√°c bu·ªïi tech talk",
      "Kh·ªüi nghi·ªáp ho·∫∑c tham gia x√¢y d·ª±ng startup c√¥ng ngh·ªá",
    ],
    icon: "üöÄ",
  },
];

export const socialLinks = [
  {
    name: "Contact",
    iconUrl: contact,
    link: "/contact",
  },
  {
    name: "GitHub",
    iconUrl: github,
    link: "https://github.com/YourGitHubUsername",
  },
  {
    name: "LinkedIn",
    iconUrl: linkedin,
    link: "https://www.linkedin.com/in/YourLinkedInUsername",
  },
  {
    name: "Facebook",
    iconUrl: facebook,
    link: "https://www.facebook.com/YourFacebookUsername",
  },
  {
    name: "Discord",
    iconUrl: discord,
    link: "https://discord.com/users/YourDiscordID",
  },
];

export const projects = [
  {
    iconUrl: react,
    theme: "btn-back-blue",
    name: "SkillCoder",
    description:
      "N·ªÅn t·∫£ng h·ªçc l·∫≠p tr√¨nh tr·ª±c tuy·∫øn v·ªõi kh√≥a h·ªçc ƒëa d·∫°ng, b√†i t·∫≠p t∆∞∆°ng t√°c, video lessons v√† forum th·∫£o lu·∫≠n.",
    technologies: ["React", "Node.js", "MongoDB", "Express"],
    link: "https://github.com/yourusername/skillcoder",
    category: "Full-stack Web",
    image: skillcoderPreview,
  },
  {
    iconUrl: estate,
    theme: "btn-back-green",
    name: "Cho Thu√™ Ph√≤ng Tr·ªç",
    description:
      "·ª®ng d·ª•ng k·∫øt n·ªëi ng∆∞·ªùi cho thu√™ v√† t√¨m ph√≤ng. T√≠ch h·ª£p t√¨m ki·∫øm, Google Maps, chat real-time v√† qu·∫£n l√Ω ƒë·∫∑t ph√≤ng.",
    technologies: ["React", "Node.js", "PostgreSQL", "Socket.io"],
    link: "https://github.com/yourusername/rental-room",
    category: "Full-stack Web",
    image: rentalPreview,
  },
  {
    iconUrl: snapgram,
    theme: "btn-back-pink",
    name: "Portfolio C√° Nh√¢n",
    description:
      "Website portfolio hi·ªán ƒë·∫°i v·ªõi 3D animations v√† interactive UI. S·ª≠ d·ª•ng Three.js cho hi·ªáu ·ª©ng 3D ƒë·∫πp m·∫Øt.",
    technologies: ["React", "Three.js", "Tailwind CSS"],
    link: "https://github.com/yourusername/portfolio",
    category: "Frontend",
    image: portfolioPreview,
  },
  {
    iconUrl: javascript,
    theme: "btn-back-yellow",
    name: "Qu·∫£n L√Ω Sinh Vi√™n",
    description:
      "H·ªá th·ªëng qu·∫£n l√Ω tr∆∞·ªùng h·ªçc v·ªõi qu·∫£n l√Ω th√¥ng tin sinh vi√™n, ƒëi·ªÉm s·ªë, l·ªãch h·ªçc, ƒëi·ªÉm danh v√† th·ªëng k√™ b√°o c√°o.",
    technologies: ["React", "Node.js", "MySQL", "Chart.js"],
    link: "https://github.com/yourusername/student-management",
    category: "Full-stack Web",
    image: studentPreview,
  },
  {
    iconUrl: nodejs,
    theme: "btn-back-orange",
    name: "Music Player Online",
    description:
      "·ª®ng d·ª•ng streaming nh·∫°c v·ªõi player t√πy ch·ªânh, playlist c√° nh√¢n, lyrics display v√† audio visualization.",
    technologies: ["React", "Node.js", "MongoDB", "Web Audio API"],
    link: "https://github.com/yourusername/music-player",
    category: "Full-stack Web",
    image: musicPreview,
  },
  {
    iconUrl: threads,
    theme: "btn-back-red",
    name: "Roguelike Dungeon Game",
    description:
      "Game roguelike 2D v·ªõi procedural generation, combat system, inventory, skill tree v√† random dungeon. M·ªói l·∫ßn ch∆°i l√† m·ªôt tr·∫£i nghi·ªám m·ªõi.",
    technologies: ["C#", "Unity", "Procedural Generation"],
    link: "https://github.com/yourusername/roguelike-game",
    category: "Game",
    image: gamePreview,
  },
];

export const blogPosts = [
  // Java Posts
  {
    id: 1,
    title: "Gi·ªõi thi·ªáu v·ªÅ Java: Ng√¥n ng·ªØ l·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng m·∫°nh m·∫Ω",
    excerpt:
      "Kh√°m ph√° Java - m·ªôt trong nh·ªØng ng√¥n ng·ªØ l·∫≠p tr√¨nh ph·ªï bi·∫øn nh·∫•t th·∫ø gi·ªõi. T√¨m hi·ªÉu v·ªÅ l·ªãch s·ª≠, ƒë·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t v√† t·∫°i sao Java v·∫´n l√† l·ª±a ch·ªçn h√†ng ƒë·∫ßu cho doanh nghi·ªáp.",
    content: `
## Java - Ng√¥n ng·ªØ c·ªßa Enterprise v√† Android

Java l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Sun Microsystems (nay thu·ªôc Oracle) v√†o nƒÉm 1995 b·ªüi James Gosling. Sau g·∫ßn 30 nƒÉm, Java v·∫´n l√† m·ªôt trong 3 ng√¥n ng·ªØ ph·ªï bi·∫øn nh·∫•t th·∫ø gi·ªõi v·ªõi h∆°n 9 tri·ªáu developers v√† 3 t·ª∑ thi·∫øt b·ªã ch·∫°y Java.

### T·∫°i sao Java v·∫´n "hot" ƒë·∫øn t·∫≠n b√¢y gi·ªù?

1. H·ªá sinh th√°i kh·ªïng l·ªì üåê
- H√†ng tri·ªáu th∆∞ vi·ªán m√£ ngu·ªìn m·ªü tr√™n Maven Central
- Framework enterprise m·∫°nh m·∫Ω: Spring Boot, Hibernate, Jakarta EE
- C·ªông ƒë·ªìng support kh·ªïng l·ªì tr√™n Stack Overflow, GitHub
- ƒê∆∞·ª£c s·ª≠ d·ª•ng b·ªüi 90% c√¥ng ty Fortune 500

2. Performance xu·∫•t s·∫Øc ‚ö°
- JVM ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a li√™n t·ª•c qua 25+ nƒÉm
- Just-In-Time (JIT) compilation tƒÉng t·ªëc runtime
- Modern GC (G1GC, ZGC, Shenandoah) v·ªõi latency c·ª±c th·∫•p
- Nhanh h∆°n Python/JavaScript 10-100 l·∫ßn trong nhi·ªÅu tr∆∞·ªùng h·ª£p

3. Write Once, Run Anywhere üöÄ
- Java bytecode ch·∫°y tr√™n m·ªçi platform c√≥ JVM
- Windows, Linux, macOS - kh√¥ng c·∫ßn compile l·∫°i
- Docker containers, Cloud native
- Embedded systems, IoT devices

### ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t

1. Strongly Typed & Type Safety

\`\`\`java
// Java ki·ªÉm tra type nghi√™m ng·∫∑t l√∫c compile
int age = 25;
// age = "twenty five";  // ‚ùå Compile error!

// Generics gi√∫p type-safe
List<String> names = new ArrayList<>();
names.add("H·∫£i ƒêƒÉng");
// names.add(123);  // ‚ùå Error - ch·ªâ nh·∫≠n String

String name = names.get(0);  // Kh√¥ng c·∫ßn cast
\`\`\`

2. Object-Oriented Programming (OOP)

Java l√† ng√¥n ng·ªØ OOP thu·∫ßn t√∫y v·ªõi 4 t√≠nh ch·∫•t:

\`\`\`java
// Encapsulation - ƒê√≥ng g√≥i d·ªØ li·ªáu
public class BankAccount {
    private double balance;  // Private - b·∫£o v·ªá d·ªØ li·ªáu
    
    public void deposit(double amount) {
        if (amount > 0) {
            this.balance += amount;
        }
    }
    
    public double getBalance() {
        return this.balance;
    }
}

// Inheritance - K·∫ø th·ª´a
public class SavingsAccount extends BankAccount {
    private double interestRate = 0.05;
    
    public void addInterest() {
        double interest = getBalance() * interestRate;
        deposit(interest);  // S·ª≠ d·ª•ng method c·ªßa parent class
    }
}

// Polymorphism - ƒêa h√¨nh
public interface Payment {
    void processPayment(double amount);
}

public class CreditCard implements Payment {
    @Override
    public void processPayment(double amount) {
        System.out.println("Thanh to√°n th·∫ª: " + amount + " VNƒê");
    }
}

public class MoMo implements Payment {
    @Override
    public void processPayment(double amount) {
        System.out.println("Thanh to√°n MoMo: " + amount + " VNƒê");
    }
}

// Abstraction - Tr·ª´u t∆∞·ª£ng h√≥a
public abstract class Vehicle {
    abstract void start();
    abstract void stop();
    
    public void honk() {
        System.out.println("Beep beep!");
    }
}
\`\`\`

3. Automatic Memory Management

\`\`\`java
public void processData() {
    // T·∫°o objects - JVM t·ª± ƒë·ªông c·∫•p ph√°t memory
    List<User> users = new ArrayList<>();
    for (int i = 0; i < 1000000; i++) {
        users.add(new User("User" + i));
    }
    
    // Process users...
    
    // Khi method k·∫øt th√∫c:
    // - Objects kh√¥ng c√≤n ƒë∆∞·ª£c tham chi·∫øu
    // - Garbage Collector t·ª± ƒë·ªông thu h·ªìi memory
    // - Developer kh√¥ng c·∫ßn lo v·ªÅ memory leak nh∆∞ C/C++
}

// Modern Garbage Collectors
// - G1GC (default Java 11+): Low latency, high throughput
// - ZGC (Java 15+): Pause time < 10ms v·ªõi heap size TB
// - Shenandoah: Concurrent GC, pause time ƒë·ªìng ƒë·ªÅu
\`\`\`

4. Multithreading Built-in

\`\`\`java
// Thread c∆° b·∫£n
Thread thread = new Thread(() -> {
    for (int i = 0; i < 5; i++) {
        System.out.println("Count: " + i);
        Thread.sleep(1000);
    }
});
thread.start();

// ExecutorService - Thread Pool
ExecutorService executor = Executors.newFixedThreadPool(4);
executor.submit(() -> {
    // Task ch·∫°y trong thread pool
    return processHeavyTask();
});

// CompletableFuture - Async Programming
CompletableFuture.supplyAsync(() -> fetchFromAPI())
    .thenApply(data -> processData(data))
    .thenAccept(result -> saveToDatabase(result))
    .exceptionally(error -> {
        System.err.println("Error: " + error);
        return null;
    });

// Virtual Threads (Java 21+) - Si√™u nh·∫π
try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
    for (int i = 0; i < 1_000_000; i++) {
        executor.submit(() -> handleRequest());  // 1 tri·ªáu threads!
    }
}
\`\`\`

### ·ª®ng d·ª•ng th·ª±c t·∫ø c·ªßa Java

1. Enterprise Applications üè¢
- Ng√¢n h√†ng: VietcomBank, Techcombank, BIDV
- E-commerce: Shopee, Tiki (backend services)
- ERP/CRM: SAP, Oracle Applications
- Logistics: Grab, Gojek platform

\`\`\`java
// Spring Boot REST API
@RestController
@RequestMapping("/api/products")
public class ProductController {
    
    @Autowired
    private ProductService productService;
    
    @GetMapping
    public ResponseEntity<List<Product>> getAllProducts() {
        return ResponseEntity.ok(productService.findAll());
    }
    
    @PostMapping
    public ResponseEntity<Product> createProduct(@RequestBody Product product) {
        Product created = productService.save(product);
        return ResponseEntity.status(HttpStatus.CREATED).body(created);
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<Product> getProduct(@PathVariable Long id) {
        return productService.findById(id)
            .map(ResponseEntity::ok)
            .orElse(ResponseEntity.notFound().build());
    }
}
\`\`\`

2. Android Development üì±
- 85% market share smartphone to√†n c·∫ßu
- 2.5 t·ª∑ thi·∫øt b·ªã Android active
- Kotlin (ch·∫°y tr√™n JVM) l√† ng√¥n ng·ªØ ch√≠nh th·ª©c
- Google Play Services vi·∫øt b·∫±ng Java

3. Big Data & Analytics üìä
- Apache Hadoop: X·ª≠ l√Ω petabytes data
- Apache Spark: Real-time processing
- Apache Kafka: Event streaming platform
- Elasticsearch: Search & analytics engine

4. Cloud & Microservices ‚òÅÔ∏è
- Spring Cloud: Netflix OSS, service discovery
- Quarkus: Si√™u nhanh, cloud-native
- Micronaut: GraalVM native image
- Jakarta EE: Enterprise services

5. Game Development üéÆ
- Minecraft - bestselling game m·ªçi th·ªùi ƒë·∫°i
- LibGDX framework - cross-platform
- jMonkeyEngine - 3D game engine

### Modern Java Features

Records (Java 14+) - Data Class
\`\`\`java
// Tr∆∞·ªõc Java 14 - ph·∫£i vi·∫øt nhi·ªÅu code
public class User {
    private final String name;
    private final int age;
    
    public User(String name, int age) {
        this.name = name;
        this.age = age;
    }
    
    public String getName() { return name; }
    public int getAge() { return age; }
    
    @Override
    public boolean equals(Object o) { /* ... */ }
    @Override
    public int hashCode() { /* ... */ }
    @Override
    public String toString() { /* ... */ }
}

// Java 14+ Records - ch·ªâ 1 d√≤ng!
public record User(String name, int age) {
    // T·ª± ƒë·ªông generate: constructor, getters, equals, hashCode, toString
}

User user = new User("H·∫£i ƒêƒÉng", 25);
System.out.println(user.name());  // Getter
System.out.println(user);  // User[name=H·∫£i ƒêƒÉng, age=25]
\`\`\`

Pattern Matching (Java 16+)
\`\`\`java
// Tr∆∞·ªõc Java 16
if (obj instanceof String) {
    String s = (String) obj;  // Ph·∫£i cast
    System.out.println(s.toUpperCase());
}

// Java 16+ - kh√¥ng c·∫ßn cast
if (obj instanceof String s) {
    System.out.println(s.toUpperCase());  // D√πng lu√¥n!
}

// Pattern matching trong switch (Java 21+)
String result = switch (obj) {
    case String s -> "String c√≥ ƒë·ªô d√†i: " + s.length();
    case Integer i -> "S·ªë nguy√™n: " + i;
    case null -> "Null value";
    default -> "Unknown type";
};
\`\`\`

Text Blocks (Java 15+)
\`\`\`java
// Tr∆∞·ªõc Java 15 - kh√≥ ƒë·ªçc
String json = "{\n" +
    "  \"name\": \"H·∫£i ƒêƒÉng\",\n" +
    "  \"role\": \"Backend Developer\"\n" +
    "}";

// Java 15+ Text Blocks - d·ªÖ ƒë·ªçc
String json = """
    {
      "name": "H·∫£i ƒêƒÉng",
      "role": "Backend Developer",
      "skills": ["Java", "Spring Boot", "PostgreSQL"]
    }
    """;
\`\`\`

Sealed Classes (Java 17+)
\`\`\`java
// Ki·ªÉm so√°t inheritance
public sealed interface Payment permits CreditCard, DebitCard, MoMo {
    void pay(double amount);
}

public final class CreditCard implements Payment {
    public void pay(double amount) { /* ... */ }
}

public final class DebitCard implements Payment {
    public void pay(double amount) { /* ... */ }
}

public final class MoMo implements Payment {
    public void pay(double amount) { /* ... */ }
}

// Kh√¥ng th·ªÉ t·∫°o class kh√°c implement Payment!
\`\`\`

### Learning Path - L·ªô tr√¨nh h·ªçc Java

Level 1: Core Java (2-3 th√°ng)
‚úÖ Syntax, Variables, Data Types
‚úÖ Control Flow: if/else, loops
‚úÖ OOP: Class, Object, Inheritance
‚úÖ Collections: List, Set, Map
‚úÖ Exception Handling

Level 2: Advanced Java (3-4 th√°ng)
‚úÖ Generics & Lambda Expressions
‚úÖ Stream API & Functional Programming
‚úÖ Multithreading & Concurrency
‚úÖ File I/O & Networking
‚úÖ JDBC & Database

Level 3: Enterprise (4-6 th√°ng)
‚úÖ Spring Framework & Spring Boot
‚úÖ RESTful API Development
‚úÖ Spring Data JPA / Hibernate
‚úÖ Spring Security
‚úÖ Microservices Architecture
‚úÖ Docker & Kubernetes

### Java Ecosystem - C√¥ng c·ª• c·∫ßn bi·∫øt

Build Tools:
- Maven: Dependency management, chu·∫©n enterprise
- Gradle: Modern, nhanh h∆°n Maven

Testing:
- JUnit 5: Unit testing
- Mockito: Mocking framework
- TestContainers: Integration test v·ªõi Docker

Frameworks:
- Spring Boot: #1 framework Java
- Hibernate: ORM ph·ªï bi·∫øn nh·∫•t
- Quarkus: Cloud-native, si√™u nhanh
- Micronaut: Low memory footprint

### M·ª©c l∆∞∆°ng Java Developer (2025)

Fresher (0-1 nƒÉm): 8-15 tri·ªáu VNƒê/th√°ng
Junior (1-2 nƒÉm): 15-25 tri·ªáu VNƒê/th√°ng
Middle (2-4 nƒÉm): 25-40 tri·ªáu VNƒê/th√°ng
Senior (4+ nƒÉm): 40-80 tri·ªáu VNƒê/th√°ng
Tech Lead/Architect: 80-150 tri·ªáu VNƒê/th√°ng

### K·∫øt lu·∫≠n

Java kh√¥ng ch·ªâ l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh, m√† l√† c·∫£ m·ªôt h·ªá sinh th√°i ho√†n ch·ªânh:

‚úÖ ·ªîn ƒë·ªãnh: 30 nƒÉm proven track record
‚úÖ Performance: Ngang C++, v∆∞·ª£t xa Python/JS
‚úÖ C·ªông ƒë·ªìng: 9M developers worldwide
‚úÖ Jobs: Nhi·ªÅu c√¥ng vi·ªác, l∆∞∆°ng cao
‚úÖ T∆∞∆°ng lai: Java 21+ v·ªõi features hi·ªán ƒë·∫°i

ƒê·∫ßu t∆∞ h·ªçc Java = ƒê·∫ßu t∆∞ cho s·ª± nghi·ªáp!
    `,
    category: "Java",
    date: "2025-10-20",
    readTime: "15 ph√∫t ƒë·ªçc",
    author: "L√™ H·∫£i ƒêƒÉng",
    featured: true,
  },
  {
    id: 2,
    title: "Spring Boot: Framework Java hi·ªán ƒë·∫°i cho Microservices",
    excerpt:
      "T√¨m hi·ªÉu v·ªÅ Spring Boot - framework m·∫°nh m·∫Ω gi√∫p x√¢y d·ª±ng ·ª©ng d·ª•ng Java nhanh ch√≥ng v√† hi·ªáu qu·∫£. Kh√°m ph√° c√°c t√≠nh nƒÉng auto-configuration v√† dependency injection.",
    content: `
## Spring Boot - Framework #1 cho Java Backend üöÄ

Spring Boot ƒë√£ c√°ch m·∫°ng h√≥a c√°ch ch√∫ng ta x√¢y d·ª±ng ·ª©ng d·ª•ng Java. T·ª´ vi·ªác ph·∫£i config h√†ng trƒÉm d√≤ng XML, gi·ªù ch·ªâ c·∫ßn m·ªôt v√†i annotations l√† c√≥ ngay m·ªôt ·ª©ng d·ª•ng production-ready!

Fun fact: Spring Boot ƒë∆∞·ª£c h∆°n 60% Java developers s·ª≠ d·ª•ng, v·ªõi h∆°n 50 tri·ªáu downloads/th√°ng tr√™n Maven Central.

### T·∫°i sao Spring Boot l·∫°i "hot" ƒë·∫øn v·∫≠y?

1. Convention over Configuration
- Kh√¥ng c·∫ßn config XML d√†i d√≤ng
- Auto-configuration th√¥ng minh
- Opinionated defaults gi√∫p b·∫Øt ƒë·∫ßu nhanh
- Override d·ªÖ d√†ng khi c·∫ßn customize

2. Production-Ready Features
- Embedded servers (Tomcat, Jetty, Undertow)
- Health checks & metrics out-of-the-box
- Application monitoring s·∫µn c√≥
- Security ƒë∆∞·ª£c t√≠ch h·ª£p s·∫µn

3. Microservices-Friendly
- Spring Cloud ecosystem
- Service discovery & load balancing
- Distributed configuration
- Circuit breakers & resilience

4. Developer Experience
- Spring Initializr: T·∫°o project trong 30s
- Spring Boot DevTools: Hot reload
- Excellent documentation
- Huge community support

### Hello World - Si√™u ƒë∆°n gi·∫£n!

\`\`\`java
// Ch·ªâ c·∫ßn 1 file duy nh·∫•t!
@SpringBootApplication
@RestController
public class HelloWorldApp {
    
    @GetMapping("/")
    public String hello() {
        return "Hello, Spring Boot!";
    }
    
    public static void main(String[] args) {
        SpringApplication.run(HelloWorldApp.class, args);
    }
}
\`\`\`

Ch·∫°y:
\`\`\`bash
./mvnw spring-boot:run
# ho·∫∑c
java -jar app.jar

# Server kh·ªüi ƒë·ªông t·∫°i http://localhost:8080
# Truy c·∫≠p "/" ‚Üí "Hello, Spring Boot!"
\`\`\`

So v·ªõi Java thu·∫ßn:
- Kh√¥ng c·∫ßn setup Tomcat server
- Kh√¥ng c·∫ßn web.xml, servlet config
- Kh√¥ng c·∫ßn XML configuration
- T·∫•t c·∫£ ƒë√£ ƒë∆∞·ª£c auto-configure!

### Dependency Injection - Tr√°i tim c·ªßa Spring

1. @Autowired - Inject dependencies t·ª± ƒë·ªông

\`\`\`java
// Service Layer
@Service
public class UserService {
    
    @Autowired
    private UserRepository userRepository;
    
    public User findById(Long id) {
        return userRepository.findById(id)
            .orElseThrow(() -> new NotFoundException("User not found"));
    }
    
    public User save(User user) {
        return userRepository.save(user);
    }
}

// Repository Layer
@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    List<User> findByName(String name);
    Optional<User> findByEmail(String email);
}

// Controller Layer
@RestController
@RequestMapping("/api/users")
public class UserController {
    
    @Autowired  // Spring t·ª± ƒë·ªông inject UserService
    private UserService userService;
    
    @GetMapping("/{id}")
    public ResponseEntity<User> getUser(@PathVariable Long id) {
        User user = userService.findById(id);
        return ResponseEntity.ok(user);
    }
}
\`\`\`

2. Constructor Injection - Recommended way

\`\`\`java
@RestController
@RequestMapping("/api/products")
public class ProductController {
    
    private final ProductService productService;
    private final CategoryService categoryService;
    
    // Constructor injection - Spring t·ª± ƒë·ªông inject
    public ProductController(
        ProductService productService,
        CategoryService categoryService
    ) {
        this.productService = productService;
        this.categoryService = categoryService;
    }
    
    @GetMapping
    public List<Product> getAllProducts() {
        return productService.findAll();
    }
}
\`\`\`

### REST API trong 5 ph√∫t!

\`\`\`java
// Entity
@Entity
@Table(name = "products")
public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;
    private Double price;
    private Integer stock;
    
    // Getters, Setters, Constructors
}

// Repository - Ch·ªâ c·∫ßn interface!
@Repository
public interface ProductRepository extends JpaRepository<Product, Long> {
    // Spring t·ª± generate implementation!
    List<Product> findByNameContaining(String name);
    List<Product> findByPriceBetween(Double min, Double max);
}

// Service
@Service
public class ProductService {
    
    @Autowired
    private ProductRepository repository;
    
    public List<Product> getAllProducts() {
        return repository.findAll();
    }
    
    public Product getProduct(Long id) {
        return repository.findById(id)
            .orElseThrow(() -> new NotFoundException("Product not found"));
    }
    
    public Product createProduct(Product product) {
        return repository.save(product);
    }
    
    public Product updateProduct(Long id, Product updated) {
        Product product = getProduct(id);
        product.setName(updated.getName());
        product.setPrice(updated.getPrice());
        product.setStock(updated.getStock());
        return repository.save(product);
    }
    
    public void deleteProduct(Long id) {
        repository.deleteById(id);
    }
}

// Controller - RESTful API
@RestController
@RequestMapping("/api/products")
@CrossOrigin(origins = "*")
public class ProductController {
    
    @Autowired
    private ProductService service;
    
    // GET /api/products
    @GetMapping
    public ResponseEntity<List<Product>> getAllProducts() {
        return ResponseEntity.ok(service.getAllProducts());
    }
    
    // GET /api/products/1
    @GetMapping("/{id}")
    public ResponseEntity<Product> getProduct(@PathVariable Long id) {
        return ResponseEntity.ok(service.getProduct(id));
    }
    
    // POST /api/products
    @PostMapping
    public ResponseEntity<Product> createProduct(@RequestBody Product product) {
        Product created = service.createProduct(product);
        return ResponseEntity.status(HttpStatus.CREATED).body(created);
    }
    
    // PUT /api/products/1
    @PutMapping("/{id}")
    public ResponseEntity<Product> updateProduct(
        @PathVariable Long id, 
        @RequestBody Product product
    ) {
        return ResponseEntity.ok(service.updateProduct(id, product));
    }
    
    // DELETE /api/products/1
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProduct(@PathVariable Long id) {
        service.deleteProduct(id);
        return ResponseEntity.noContent().build();
    }
}
\`\`\`

application.yml - Configuration
\`\`\`yaml
spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/mydb
    username: admin
    password: secret
    
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    
server:
  port: 8080
\`\`\`

Ch·∫°y app ‚Üí API s·∫µn s√†ng:
- GET http://localhost:8080/api/products
- POST http://localhost:8080/api/products
- PUT http://localhost:8080/api/products/1
- DELETE http://localhost:8080/api/products/1

### Spring Boot Data JPA - SQL m√† kh√¥ng c·∫ßn SQL!

\`\`\`java
@Repository
public interface OrderRepository extends JpaRepository<Order, Long> {
    
    // Method names ‚Üí SQL queries t·ª± ƒë·ªông!
    
    List<Order> findByCustomerId(Long customerId);
    // SELECT * FROM orders WHERE customer_id = ?
    
    List<Order> findByStatusAndTotalGreaterThan(String status, Double total);
    // SELECT * FROM orders WHERE status = ? AND total > ?
    
    @Query("SELECT o FROM Order o WHERE o.createdAt BETWEEN :start AND :end")
    List<Order> findOrdersInDateRange(
        @Param("start") LocalDate start, 
        @Param("end") LocalDate end
    );
    
    @Query(value = "SELECT * FROM orders WHERE EXTRACT(YEAR FROM created_at) = :year", 
           nativeQuery = true)
    List<Order> findOrdersByYear(@Param("year") int year);
}
\`\`\`

### Exception Handling - X·ª≠ l√Ω l·ªói chuy√™n nghi·ªáp

\`\`\`java
// Custom Exception
public class NotFoundException extends RuntimeException {
    public NotFoundException(String message) {
        super(message);
    }
}

// Global Exception Handler
@RestControllerAdvice
public class GlobalExceptionHandler {
    
    @ExceptionHandler(NotFoundException.class)
    public ResponseEntity<ErrorResponse> handleNotFound(NotFoundException ex) {
        ErrorResponse error = new ErrorResponse(
            HttpStatus.NOT_FOUND.value(),
            ex.getMessage(),
            LocalDateTime.now()
        );
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(error);
    }
    
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleGeneric(Exception ex) {
        ErrorResponse error = new ErrorResponse(
            HttpStatus.INTERNAL_SERVER_ERROR.value(),
            "An error occurred",
            LocalDateTime.now()
        );
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);
    }
}
\`\`\`

### Validation - Ki·ªÉm tra d·ªØ li·ªáu t·ª± ƒë·ªông

\`\`\`java
@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @NotBlank(message = "Name is required")
    @Size(min = 2, max = 50, message = "Name must be 2-50 characters")
    private String name;
    
    @Email(message = "Invalid email format")
    @NotBlank(message = "Email is required")
    private String email;
    
    @Min(value = 18, message = "Age must be at least 18")
    @Max(value = 100, message = "Age must be at most 100")
    private Integer age;
    
    @Pattern(regexp = "^[0-9]{10}$", message = "Phone must be 10 digits")
    private String phone;
}

@RestController
@RequestMapping("/api/users")
public class UserController {
    
    @PostMapping
    public ResponseEntity<User> createUser(@Valid @RequestBody User user) {
        // @Valid t·ª± ƒë·ªông validate theo annotations
        // N·∫øu invalid ‚Üí throw MethodArgumentNotValidException
        return ResponseEntity.ok(userService.save(user));
    }
}
\`\`\`

### Spring Security - B·∫£o m·∫≠t ·ª©ng d·ª•ng

\`\`\`java
@Configuration
@EnableWebSecurity
public class SecurityConfig {
    
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf().disable()
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/public/").permitAll()
                .requestMatchers("/api/admin/").hasRole("ADMIN")
                .anyRequest().authenticated()
            )
            .httpBasic();
        
        return http.build();
    }
    
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
\`\`\`

### Testing - Unit & Integration Tests

\`\`\`java
@SpringBootTest
@AutoConfigureMockMvc
class ProductControllerTest {
    
    @Autowired
    private MockMvc mockMvc;
    
    @MockBean
    private ProductService productService;
    
    @Test
    void shouldReturnAllProducts() throws Exception {
        List<Product> products = Arrays.asList(
            new Product(1L, "Laptop", 1000.0),
            new Product(2L, "Phone", 500.0)
        );
        
        when(productService.getAllProducts()).thenReturn(products);
        
        mockMvc.perform(get("/api/products"))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.length()").value(2))
            .andExpect(jsonPath("$[0].name").value("Laptop"));
    }
}
\`\`\`

### Actuator - Monitoring & Health Checks

\`\`\`yaml
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
\`\`\`

Endpoints t·ª± ƒë·ªông:
- /actuator/health ‚Üí Health status
- /actuator/info ‚Üí App info
- /actuator/metrics ‚Üí Metrics
- /actuator/prometheus ‚Üí Prometheus format

### K·∫øt lu·∫≠n

Spring Boot = Best choice cho Java backend:

‚úÖ Fast Development: Convention over configuration
‚úÖ Production-Ready: Embedded server, monitoring
‚úÖ Rich Ecosystem: Spring Data, Security, Cloud
‚úÖ Industry Standard: 60%+ Java projects
‚úÖ High Demand: L∆∞∆°ng cao, job nhi·ªÅu

Learning Path:
1. Core Java (OOP, Collections)
2. Spring Core (DI, IoC)
3. Spring Boot Basics
4. Spring Data JPA
5. Spring Security
6. Microservices with Spring Cloud

Happy Spring Boot coding! üöÄ
    `,
    category: "Java",
    date: "2025-10-18",
    readTime: "20 ph√∫t ƒë·ªçc",
    author: "L√™ H·∫£i ƒêƒÉng",
    featured: false,
  },
  {
    id: 3,
    title: "Java Collections Framework: ArrayList vs LinkedList",
    excerpt:
      "So s√°nh chi ti·∫øt gi·ªØa ArrayList v√† LinkedList trong Java. Khi n√†o n√™n d√πng c√°i n√†o? Ph√¢n t√≠ch performance v√† use cases th·ª±c t·∫ø.",
    content: `
## ArrayList vs LinkedList - Ch·ªçn ƒë√∫ng ƒë·ªÉ code nhanh! ‚ö°

ƒê√¢y l√† c√¢u h·ªèi ph·ªèng v·∫•n Java kinh ƒëi·ªÉn: "Khi n√†o d√πng ArrayList, khi n√†o d√πng LinkedList?" Nhi·ªÅu ng∆∞·ªùi ch·ªâ bi·∫øt l√Ω thuy·∫øt nh∆∞ng kh√¥ng hi·ªÉu s√¢u v·ªÅ performance implications.

H√¥m nay m√¨nh s·∫Ω ph√¢n t√≠ch chi ti·∫øt ƒë·ªÉ c√°c b·∫°n kh√¥ng bao gi·ªù ch·ªçn sai n·ªØa!

### Internal Structure - C·∫•u tr√∫c b√™n trong

ArrayList - Dynamic Array

\`\`\`java
// ArrayList l∆∞u tr·ªØ elements trong array
public class ArrayList<E> {
    private Object[] elementData;  // Backing array
    private int size;  // S·ªë ph·∫ßn t·ª≠ hi·ªán t·∫°i
    
    // Default capacity = 10
    public ArrayList() {
        this.elementData = new Object[10];
    }
    
    // Add element
    public boolean add(E element) {
        if (size == elementData.length) {
            grow();  // TƒÉng capacity khi ƒë·∫ßy
        }
        elementData[size++] = element;
        return true;
    }
    
    // Get by index - O(1)
    public E get(int index) {
        return (E) elementData[index];  // Direct access!
    }
}
\`\`\`

LinkedList - Doubly Linked List

\`\`\`java
// LinkedList l∆∞u tr·ªØ elements trong nodes
public class LinkedList<E> {
    private Node<E> first;  // First node
    private Node<E> last;   // Last node
    private int size;
    
    private static class Node<E> {
        E item;
        Node<E> next;  // Link to next node
        Node<E> prev;  // Link to previous node
        
        Node(Node<E> prev, E element, Node<E> next) {
            this.item = element;
            this.next = next;
            this.prev = prev;
        }
    }
    
    // Add element at end - O(1)
    public boolean add(E element) {
        final Node<E> l = last;
        final Node<E> newNode = new Node<>(l, element, null);
        last = newNode;
        if (l == null)
            first = newNode;
        else
            l.next = newNode;
        size++;
        return true;
    }
    
    // Get by index - O(n)
    public E get(int index) {
        Node<E> x = first;
        for (int i = 0; i < index; i++)
            x = x.next;  // Must traverse!
        return x.item;
    }
}
\`\`\`

### Time Complexity - So s√°nh hi·ªáu nƒÉng

| Operation | ArrayList | LinkedList |
|-----------|-----------|------------|
| get(index) | O(1) ‚ö° | O(n) üê¢ |
| add(element) | O(1)* | O(1) ‚ö° |
| add(index, element) | O(n) | O(n) |
| remove(index) | O(n) | O(n) |
| contains(element) | O(n) | O(n) |
| iterator.remove() | O(n) | O(1) ‚ö° |

*ArrayList add() c√≥ th·ªÉ O(n) khi resize array

### Benchmark - Th·ª±c t·∫ø nhanh bao nhi√™u?

\`\`\`java
public class BenchmarkTest {
    public static void main(String[] args) {
        int size = 100000;
        
        // Test 1: Random Access
        testRandomAccess(new ArrayList<>(), size);
        testRandomAccess(new LinkedList<>(), size);
        
        // Test 2: Add at end
        testAddAtEnd(new ArrayList<>(), size);
        testAddAtEnd(new LinkedList<>(), size);
        
        // Test 3: Add at beginning
        testAddAtBeginning(new ArrayList<>(), size);
        testAddAtBeginning(new LinkedList<>(), size);
    }
    
    static void testRandomAccess(List<Integer> list, int size) {
        // Th√™m elements tr∆∞·ªõc
        for (int i = 0; i < size; i++) {
            list.add(i);
        }
        
        long start = System.nanoTime();
        for (int i = 0; i < size; i++) {
            list.get(i);  // Random access
        }
        long end = System.nanoTime();
        
        System.out.println(list.getClass().getSimpleName() + 
            " random access: " + (end - start) / 1_000_000 + "ms");
    }
}
\`\`\`

K·∫øt qu·∫£ (100,000 elements):
\`\`\`
ArrayList random access: 2ms ‚ö°
LinkedList random access: 4,850ms üê¢

ArrayList add at end: 5ms
LinkedList add at end: 6ms

ArrayList add at beginning: 2,450ms
LinkedList add at beginning: 5ms ‚ö°
\`\`\`

### Memory Usage - S·ª≠ d·ª•ng b·ªô nh·ªõ

ArrayList:
\`\`\`java
// ArrayList memory = array + metadata
Memory = 24 bytes (object header)
       + 4 bytes (size)
       + 4 bytes (modCount)
       + capacity * 4 bytes (array references)

// Example: 10 elements, capacity 16
= 24 + 4 + 4 + (16 * 4) = 96 bytes
\`\`\`

LinkedList:
\`\`\`java
// LinkedList memory = nodes + metadata
Memory = 24 bytes (object header)
       + 8 bytes (first reference)
       + 8 bytes (last reference)
       + 4 bytes (size)
       + size * 24 bytes (each node)

// Each Node:
= 16 bytes (object header)
+ 4 bytes (item reference)
+ 4 bytes (next reference)
+ 4 bytes (prev reference)
= 28 bytes per node

// Example: 10 elements
= 24 + 8 + 8 + 4 + (10 * 28) = 324 bytes
\`\`\`

K·∫øt lu·∫≠n: ArrayList ti·∫øt ki·ªám b·ªô nh·ªõ h∆°n 3-4 l·∫ßn!

### Use Cases - Khi n√†o d√πng g√¨?

D√πng ArrayList khi:

‚úÖ Random access nhi·ªÅu
\`\`\`java
// Accessing by index frequently
List<Product> products = new ArrayList<>();
for (int i = 0; i < products.size(); i++) {
    Product p = products.get(i);  // O(1) - Fast!
    System.out.println(p.getName());
}
\`\`\`

‚úÖ Read nhi·ªÅu h∆°n write
\`\`\`java
// Config data - rarely changes
List<Config> configs = loadConfigs();  // ArrayList
Config dbConfig = configs.get(0);  // Fast access
\`\`\`

‚úÖ Th√™m elements ·ªü cu·ªëi
\`\`\`java
List<LogEntry> logs = new ArrayList<>();
logs.add(new LogEntry("Error occurred"));  // O(1)
\`\`\`

‚úÖ Iterate th√¥ng th∆∞·ªùng
\`\`\`java
for (User user : users) {  // ArrayList faster
    sendEmail(user);
}
\`\`\`

D√πng LinkedList khi:

‚úÖ Insert/Delete ·ªü ƒë·∫ßu ho·∫∑c gi·ªØa
\`\`\`java
LinkedList<Task> queue = new LinkedList<>();
queue.addFirst(urgentTask);  // O(1)
queue.addLast(normalTask);   // O(1)
Task next = queue.removeFirst();  // O(1)
\`\`\`

‚úÖ Implement Queue/Deque
\`\`\`java
Deque<Integer> deque = new LinkedList<>();
deque.offerFirst(1);   // Add to front
deque.offerLast(2);    // Add to end
deque.pollFirst();     // Remove from front
deque.pollLast();      // Remove from end
\`\`\`

‚úÖ Iterator.remove() nhi·ªÅu
\`\`\`java
Iterator<String> iter = list.iterator();
while (iter.hasNext()) {
    String item = iter.next();
    if (shouldRemove(item)) {
        iter.remove();  // LinkedList: O(1)
    }
}
\`\`\`

### Real-world Examples

Example 1: Shopping Cart (D√πng ArrayList)
\`\`\`java
public class ShoppingCart {
    private List<CartItem> items = new ArrayList<>();
    
    public void addItem(CartItem item) {
        items.add(item);  // Th√™m cu·ªëi - O(1)
    }
    
    public CartItem getItem(int index) {
        return items.get(index);  // Random access - O(1)
    }
    
    public double getTotalPrice() {
        double total = 0;
        for (CartItem item : items) {  // Iterate - Fast
            total += item.getPrice();
        }
        return total;
    }
    
    public void clear() {
        items.clear();
    }
}
\`\`\`

Example 2: Task Queue (D√πng LinkedList)
\`\`\`java
public class TaskQueue {
    private LinkedList<Task> queue = new LinkedList<>();
    
    public void addHighPriority(Task task) {
        queue.addFirst(task);  // Th√™m ƒë·∫ßu - O(1)
    }
    
    public void addNormal(Task task) {
        queue.addLast(task);  // Th√™m cu·ªëi - O(1)
    }
    
    public Task getNext() {
        return queue.pollFirst();  // L·∫•y ƒë·∫ßu - O(1)
    }
    
    public boolean isEmpty() {
        return queue.isEmpty();
    }
}
\`\`\`

Example 3: Browser History (D√πng LinkedList)
\`\`\`java
public class BrowserHistory {
    private LinkedList<String> history = new LinkedList<>();
    private int currentIndex = -1;
    
    public void visit(String url) {
        // Remove all forward history
        while (history.size() > currentIndex + 1) {
            history.removeLast();
        }
        history.addLast(url);
        currentIndex++;
    }
    
    public String back() {
        if (currentIndex > 0) {
            currentIndex--;
            return history.get(currentIndex);
        }
        return null;
    }
    
    public String forward() {
        if (currentIndex < history.size() - 1) {
            currentIndex++;
            return history.get(currentIndex);
        }
        return null;
    }
}
\`\`\`

### Common Mistakes - Sai l·∫ßm th∆∞·ªùng g·∫∑p

‚ùå Mistake 1: D√πng LinkedList v√¨ "insert nhanh"
\`\`\`java
// ‚ùå WRONG - LinkedList kh√¥ng nhanh h∆°n!
List<String> names = new LinkedList<>();
for (int i = 0; i < 1000; i++) {
    names.add("Name" + i);  // LinkedList: 6ms
}

// ‚úÖ CORRECT
List<String> names = new ArrayList<>();
for (int i = 0; i < 1000; i++) {
    names.add("Name" + i);  // ArrayList: 2ms
}
\`\`\`

‚ùå Mistake 2: Random access trong LinkedList
\`\`\`java
// ‚ùå WRONG - C·ª±c k·ª≥ ch·∫≠m!
LinkedList<Integer> list = new LinkedList<>();
for (int i = 0; i < list.size(); i++) {
    int value = list.get(i);  // O(n) m·ªói l·∫ßn!
}
// Total: O(n¬≤) - Disaster!

// ‚úÖ CORRECT - D√πng iterator
for (Integer value : list) {  // O(n)
    // Process value
}
\`\`\`

‚ùå Mistake 3: Kh√¥ng set initial capacity
\`\`\`java
// ‚ùå WRONG - Resize nhi·ªÅu l·∫ßn
List<String> list = new ArrayList<>();  // capacity = 10
for (int i = 0; i < 10000; i++) {
    list.add("Item" + i);  // Resize at 10, 15, 22, 33...
}

// ‚úÖ CORRECT - Set capacity tr∆∞·ªõc
List<String> list = new ArrayList<>(10000);
for (int i = 0; i < 10000; i++) {
    list.add("Item" + i);  // No resize!
}
\`\`\`

### Quick Decision Guide

\`\`\`
H·ªèi: C·∫ßn access by index?
‚îú‚îÄ C√≥ ‚Üí ArrayList ‚úÖ
‚îî‚îÄ Kh√¥ng
    ‚îî‚îÄ H·ªèi: Insert/remove ·ªü ƒë·∫ßu/cu·ªëi?
        ‚îú‚îÄ C√≥ ‚Üí LinkedList ‚úÖ
        ‚îî‚îÄ Kh√¥ng ‚Üí ArrayList ‚úÖ (default choice)
\`\`\`

Rule of thumb: 
- 90% tr∆∞·ªùng h·ª£p: D√πng ArrayList
- 10% tr∆∞·ªùng h·ª£p: D√πng LinkedList (Queue/Deque)

### K·∫øt lu·∫≠n

| Metric | ArrayList | LinkedList |
|--------|-----------|------------|
| Random Access | ‚ö°‚ö°‚ö°‚ö°‚ö° | ‚≠ê |
| Add at end | ‚ö°‚ö°‚ö°‚ö° | ‚ö°‚ö°‚ö°‚ö°‚ö° |
| Add at beginning | ‚≠ê | ‚ö°‚ö°‚ö°‚ö°‚ö° |
| Memory Usage | ‚ö°‚ö°‚ö°‚ö°‚ö° | ‚≠ê‚≠ê |
| Iterator.remove() | ‚≠ê‚≠ê | ‚ö°‚ö°‚ö°‚ö°‚ö° |

L·ªùi khuy√™n cu·ªëi:
- M·∫∑c ƒë·ªãnh d√πng ArrayList
- Ch·ªâ d√πng LinkedList khi implement Queue/Deque
- ƒêo performance th·ª±c t·∫ø n·∫øu quan tr·ªçng
- Initial capacity cho ArrayList ƒë·ªÉ tr√°nh resize

Happy coding with the right List! üéØ
    `,
    category: "Java",
    date: "2025-10-15",
    readTime: "16 ph√∫t ƒë·ªçc",
    author: "L√™ H·∫£i ƒêƒÉng",
    featured: false,
  },
  {
    id: 4,
    title: "JVM Memory Management v√† Garbage Collection",
    excerpt:
      "Hi·ªÉu s√¢u v·ªÅ c√°ch JVM qu·∫£n l√Ω b·ªô nh·ªõ. T√¨m hi·ªÉu v·ªÅ Heap, Stack, Garbage Collection algorithms v√† c√°ch t·ªëi ∆∞u h√≥a performance.",
    content: `
## JVM Memory Management - Kh√¥ng ph·∫£i lo memory leak! üß†

M·ªôt trong nh·ªØng l·ª£i th·∫ø l·ªõn nh·∫•t c·ªßa Java so v·ªõi C/C++ l√† Automatic Memory Management. Developer kh√¥ng c·∫ßn malloc/free, JVM lo h·∫øt!

Nh∆∞ng ƒë·ªÉ optimize performance v√† debug memory issues, b·∫°n c·∫ßn hi·ªÉu JVM ho·∫°t ƒë·ªông th·∫ø n√†o.

### JVM Memory Structure

\`\`\`
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ          JVM Memory Layout              ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  Method Area (Metaspace)                ‚îÇ
‚îÇ  - Class metadata                       ‚îÇ
‚îÇ  - Static variables                     ‚îÇ
‚îÇ  - Constant pool                        ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  Heap Memory                            ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ  Young Generation (1/3)           ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îú‚îÄ Eden Space (8/10)             ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îú‚îÄ Survivor 0 (1/10)             ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îî‚îÄ Survivor 1 (1/10)             ‚îÇ  ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§  ‚îÇ
‚îÇ  ‚îÇ  Old Generation (2/3)             ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  - Long-lived objects             ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  Stack Memory (per thread)              ‚îÇ
‚îÇ  - Local variables                      ‚îÇ
‚îÇ  - Method calls                         ‚îÇ
‚îÇ  - References to objects                ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  Native Method Stack                    ‚îÇ
‚îÇ  - JNI calls                            ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ  PC Registers (per thread)              ‚îÇ
‚îÇ  - Current instruction pointer          ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
\`\`\`

Heap vs Stack - Ph√¢n bi·ªát r√µ r√†ng:

\`\`\`java
public class MemoryDemo {
    public static void main(String[] args) {
        int age = 25;  // Stack - primitive
        String name = "ƒêƒÉng";  // "name" ref ‚Üí Stack
                               // "ƒêƒÉng" object ‚Üí Heap
        
        User user = new User("H·∫£i ƒêƒÉng", 25);
        // "user" reference ‚Üí Stack
        // User object ‚Üí Heap (Young Gen - Eden)
    }
}

class User {
    private String name;  // Heap
    private int age;      // Heap (part of User object)
    
    public void greet() {
        String message = "Hello";  // Stack
        // "message" ref ‚Üí Stack
        // "Hello" object ‚Üí Heap (String pool)
    }
}
\`\`\`

### Garbage Collection - Thu d·ªçn r√°c t·ª± ƒë·ªông

1. Minor GC - Young Generation

\`\`\`
1. Object ƒë∆∞·ª£c t·∫°o ‚Üí Eden Space
2. Eden ƒë·∫ßy ‚Üí Minor GC
3. Objects c√≤n s·ªëng ‚Üí Survivor 0
4. Eden ƒë·∫ßy l·∫ßn 2 ‚Üí Minor GC
5. Survivors ‚Üí Survivor 1
6. Swap S0 ‚Üî S1 li√™n t·ª•c
7. Objects s·ªëng l√¢u ‚Üí Old Generation
\`\`\`

2. Major GC - Old Generation
- Ch·∫°y khi Old Gen ƒë·∫ßy
- Stop-the-world event (app pause!)
- Ch·∫≠m h∆°n Minor GC nhi·ªÅu

Example Code:
\`\`\`java
public class GCDemo {
    public static void main(String[] args) {
        // Enable GC logging
        // -Xlog:gc*
        
        List<byte[]> list = new ArrayList<>();
        
        // Allocate lots of objects
        for (int i = 0; i < 100; i++) {
            byte[] bytes = new byte[1024 * 1024];  // 1MB
            list.add(bytes);  // Keep reference - won't be GC'd
            
            // Unreferenced object - eligible for GC
            byte[] temp = new byte[1024 * 1024];
        }
        
        // Suggest GC (kh√¥ng ƒë·∫£m b·∫£o ch·∫°y ngay!)
        System.gc();
        
        // Clear list - objects eligible for GC
        list.clear();
        list = null;
    }
}
\`\`\`

### Modern GC Algorithms

1. G1GC (Default Java 11+)
- Low latency
- Predictable pause times
- Best for most applications

\`\`\`bash
java -XX:+UseG1GC -Xms2g -Xmx4g -XX:MaxGCPauseMillis=200 MyApp
\`\`\`

2. ZGC (Java 15+)
- Ultra-low latency (< 10ms pause)
- Handles TB-sized heaps
- Perfect for real-time systems

\`\`\`bash
java -XX:+UseZGC -Xms16g -Xmx16g MyApp
\`\`\`

3. Shenandoah
- Concurrent GC
- Low pause times
- Good for microservices

### Memory Leaks - V·∫´n c√≥ th·ªÉ x·∫£y ra!

\`\`\`java
// ‚ùå Memory Leak - Map gi·ªØ references m√£i m√£i
public class Cache {
    private static Map<String, User> cache = new HashMap<>();
    
    public static void addUser(User user) {
        cache.put(user.getId(), user);  // Leak!
    }
}

// ‚úÖ FIX - D√πng WeakHashMap
public class Cache {
    private static Map<String, User> cache = new WeakHashMap<>();
    
    public static void addUser(User user) {
        cache.put(user.getId(), user);  // GC c√≥ th·ªÉ clean up
    }
}
\`\`\`

### JVM Tuning Parameters

\`\`\`bash
# Heap size
-Xms2g          # Initial heap
-Xmx4g          # Maximum heap

# Young Generation
-XX:NewRatio=2  # Old:Young = 2:1

# GC selection
-XX:+UseG1GC
-XX:+UseZGC
-XX:+UseShenandoahGC

# GC logging
-Xlog:gc*:file=gc.log

# OutOfMemoryError dump
-XX:+HeapDumpOnOutOfMemoryError
-XX:HeapDumpPath=/tmp/heapdump.hprof
\`\`\`

### Performance Optimization Tips

‚úÖ Set initial heap size:
\`\`\`bash
java -Xms4g -Xmx4g  # Same min & max ‚Üí No resize overhead
\`\`\`

‚úÖ Reuse objects:
\`\`\`java
// ‚ùå Creates many objects
for (int i = 0; i < 1000000; i++) {
    String str = "Number: " + i;
}

// ‚úÖ Reuse StringBuilder
StringBuilder sb = new StringBuilder();
for (int i = 0; i < 1000000; i++) {
    sb.setLength(0);
    sb.append("Number: ").append(i);
}
\`\`\`

‚úÖ Use primitives when possible:
\`\`\`java
// ‚ùå Boxing creates objects
List<Integer> nums = new ArrayList<>();

// ‚úÖ Use primitive array
int[] nums = new int[1000];
\`\`\`

### K·∫øt lu·∫≠n

JVM Memory Management = Fire and forget:

‚úÖ Kh√¥ng c·∫ßn malloc/free
‚úÖ GC t·ª± ƒë·ªông clean up
‚úÖ Modern GCs r·∫•t nhanh
‚úÖ Tune ƒë∆∞·ª£c performance
‚úÖ Memory safe (no dangling pointers)

Remember: Hi·ªÉu JVM = Code Java nh∆∞ pro! üöÄ
    `,
    category: "Java",
    date: "2025-10-12",
    readTime: "14 ph√∫t ƒë·ªçc",
    author: "L√™ H·∫£i ƒêƒÉng",
    featured: false,
  },

  // JavaScript Posts
  {
    id: 5,
    title: "JavaScript ES6+: T√≠nh nƒÉng hi·ªán ƒë·∫°i b·∫°n c·∫ßn bi·∫øt",
    excerpt:
      "Kh√°m ph√° c√°c t√≠nh nƒÉng m·ªõi trong ES6+ nh∆∞ Arrow Functions, Destructuring, Spread Operator, Promises v√† Async/Await. N√¢ng cao k·ªπ nƒÉng JavaScript c·ªßa b·∫°n.",
    content: `
## JavaScript ES6+ - Revolution in Web Development üöÄ

ECMAScript 2015 (ES6) ƒë√£ c√°ch m·∫°ng h√≥a JavaScript, bi·∫øn n√≥ t·ª´ m·ªôt ng√¥n ng·ªØ ƒë∆°n gi·∫£n th√†nh m·ªôt trong nh·ªØng ng√¥n ng·ªØ m·∫°nh m·∫Ω nh·∫•t. V·ªõi 12 t·ª∑ thi·∫øt b·ªã ch·∫°y JavaScript v√† t·∫•t c·∫£ c√°c tr√¨nh duy·ªát web hi·ªán ƒë·∫°i, ES6+ l√† must-have skill cho m·ªçi web developer.

### T·∫°i sao ES6+ quan tr·ªçng?

1. Modern Syntax - Code ƒë·∫πp h∆°n, ng·∫Øn g·ªçn h∆°n
- Arrow functions: Gi·∫£m 50% d√≤ng code
- Destructuring: Tr√≠ch xu·∫•t data si√™u nhanh
- Template literals: String interpolation d·ªÖ ƒë·ªçc
- Spread operator: Clone & merge objects/arrays d·ªÖ d√†ng

2. Better Async Handling
- Promises: T·∫°m bi·ªát callback hell
- Async/Await: Code b·∫•t ƒë·ªìng b·ªô nh∆∞ ƒë·ªìng b·ªô
- Fetch API: HTTP requests hi·ªán ƒë·∫°i

3. Module System
- Import/Export: Code modular, reusable
- Tree shaking: Bundle size nh·ªè h∆°n
- Dynamic imports: Load code on demand

### 1. Arrow Functions - C√∫ ph√°p ng·∫Øn g·ªçn

Arrow functions kh√¥ng ch·ªâ ng·∫Øn g·ªçn m√† c√≤n gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ \`this\` binding:

\`\`\`javascript
// ‚ùå ES5 - D√†i d√≤ng
function add(a, b) {
    return a + b;
}

var numbers = [1, 2, 3];
var doubled = numbers.map(function(n) {
    return n * 2;
});

// ‚úÖ ES6 - Ng·∫Øn g·ªçn
const add = (a, b) => a + b;

const numbers = [1, 2, 3];
const doubled = numbers.map(n => n * 2);

// Lexical this binding - Gi·∫£i quy·∫øt this trong callbacks
class Counter {
    constructor() {
        this.count = 0;
    }
    
    // ‚ùå ES5 - this b·ªã undefined
    startES5() {
        setInterval(function() {
            this.count++;  // Error! this = window
            console.log(this.count);
        }, 1000);
    }
    
    // ‚úÖ ES6 - this binding ƒë√∫ng
    startES6() {
        setInterval(() => {
            this.count++;  // OK! this = Counter instance
            console.log(this.count);
        }, 1000);
    }
}

// Implicit return - Return t·ª± ƒë·ªông v·ªõi single expression
const multiply = (a, b) => a * b;  // Kh√¥ng c·∫ßn return
const square = x => x * x;  // Kh√¥ng c·∫ßn () n·∫øu 1 param

// Multi-line v·ªõi explicit return
const complexCalculation = (a, b) => {
    const sum = a + b;
    const product = a * b;
    return { sum, product };
};
\`\`\`

### 2. Destructuring - Tr√≠ch xu·∫•t data si√™u nhanh

\`\`\`javascript
// Object Destructuring
const user = {
    name: 'H·∫£i ƒêƒÉng',
    age: 25,
    role: 'Backend Developer',
    skills: ['Java', 'JavaScript', 'PostgreSQL']
};

// ‚ùå ES5
var name = user.name;
var age = user.age;
var role = user.role;

// ‚úÖ ES6
const { name, age, role } = user;

// Rename variables
const { name: userName, age: userAge } = user;

// Default values
const { city = 'TP.HCM', country = 'Vietnam' } = user;

// Nested destructuring
const { skills: [firstSkill, ...otherSkills] } = user;

// Function parameters
function printUser({ name, role }) {
    console.log(\`\${name} - \${role}\`);
}
printUser(user);  // H·∫£i ƒêƒÉng - Backend Developer

// Array Destructuring
const colors = ['red', 'green', 'blue', 'yellow'];

const [primary, secondary, ...others] = colors;
// primary = 'red'
// secondary = 'green'
// others = ['blue', 'yellow']

// Skip elements
const [first, , third] = colors;  // first='red', third='blue'

// Swap variables without temp
let a = 1, b = 2;
[a, b] = [b, a];  // a=2, b=1

// React useState pattern
const [count, setCount] = useState(0);
const [user, setUser] = useState(null);
\`\`\`

### 3. Template Literals - String Interpolation

\`\`\`javascript
const name = 'H·∫£i ƒêƒÉng';
const role = 'Backend Developer';
const experience = 3;

// ‚ùå ES5 - Concat strings
var message = 'Hello, my name is ' + name + 
    '. I am a ' + role + 
    ' with ' + experience + ' years of experience.';

// ‚úÖ ES6 - Template literals
const message = \`Hello, my name is \${name}.
I am a \${role} with \${experience} years of experience.\`;

// Expressions inside \${}
const price = 100;
const tax = 0.1;
console.log(\`Total: \${price * (1 + tax)} VNƒê\`);

// Multi-line strings
const html = \`
    <div class="user-card">
        <h2>\${name}</h2>
        <p>\${role}</p>
        <ul>
            \${skills.map(s => \`<li>\${s}</li>\`).join('')}
        </ul>
    </div>
\`;

// Tagged templates - Advanced
function highlight(strings, ...values) {
    return strings.reduce((result, str, i) => {
        const value = values[i] || '';
        return result + str + \`<mark>\${value}</mark>\`;
    }, '');
}

const highlighted = highlight\`Name: \${name}, Role: \${role}\`;
// "Name: <mark>H·∫£i ƒêƒÉng</mark>, Role: <mark>Backend Developer</mark>"
\`\`\`

### 4. Spread & Rest Operators - ... magic

\`\`\`javascript
// Spread Operator - Expand elements
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];

// Combine arrays
const combined = [...arr1, ...arr2];  // [1,2,3,4,5,6]

// Copy array (shallow)
const copy = [...arr1];

// Add elements
const extended = [0, ...arr1, 4];  // [0,1,2,3,4]

// Spread objects
const user = { name: 'ƒêƒÉng', age: 25 };
const developer = { ...user, role: 'Backend Dev', skills: ['Java'] };

// Override properties
const updated = { ...user, age: 26 };  // age updated

// Combine objects
const obj1 = { a: 1, b: 2 };
const obj2 = { c: 3, d: 4 };
const merged = { ...obj1, ...obj2 };  // {a:1, b:2, c:3, d:4}

// Function arguments
const numbers = [1, 2, 3, 4, 5];
Math.max(...numbers);  // 5 (thay v√¨ Math.max.apply)

// React props spreading
const props = { name: 'ƒêƒÉng', age: 25 };
<UserCard {...props} />  // Pass all props

// Rest Operator - Collect remaining elements
function sum(...numbers) {
    return numbers.reduce((total, n) => total + n, 0);
}
sum(1, 2, 3, 4, 5);  // 15

// Destructuring with rest
const [first, second, ...rest] = [1, 2, 3, 4, 5];
// first=1, second=2, rest=[3,4,5]

const { name, ...otherProps } = user;
// name='ƒêƒÉng', otherProps={age:25, role:...}
\`\`\`

### 5. Enhanced Object Literals

\`\`\`javascript
const name = 'ƒêƒÉng';
const age = 25;

// ‚ùå ES5
var user = {
    name: name,
    age: age,
    greet: function() {
        console.log('Hello!');
    }
};

// ‚úÖ ES6 - Shorthand properties
const user = {
    name,  // T·ª± ƒë·ªông name: name
    age,
    greet() {  // Shorthand method
        console.log('Hello!');
    }
};

// Computed property names
const field = 'email';
const user = {
    name: 'ƒêƒÉng',
    [field]: 'dang@example.com',  // Dynamic key
    [\`user_\${Date.now()}\`]: 'unique_id'
};

// Dynamic methods
const operations = {
    add: 'plus',
    subtract: 'minus'
};
const calculator = {
    [operations.add](a, b) { return a + b; },
    [operations.subtract](a, b) { return a - b; }
};
\`\`\`

### 6. Promises - Tho√°t kh·ªèi Callback Hell

\`\`\`javascript
// ‚ùå Callback Hell - Code kh√≥ ƒë·ªçc
getData(function(data) {
    processData(data, function(result) {
        saveData(result, function(saved) {
            sendNotification(saved, function(sent) {
                console.log('Done!');
            });
        });
    });
});

// ‚úÖ Promises - Code d·ªÖ ƒë·ªçc
getData()
    .then(data => processData(data))
    .then(result => saveData(result))
    .then(saved => sendNotification(saved))
    .then(() => console.log('Done!'))
    .catch(error => console.error(error));

// Creating Promises
const fetchUser = (id) => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (id > 0) {
                resolve({ id, name: 'ƒêƒÉng' });
            } else {
                reject(new Error('Invalid ID'));
            }
        }, 1000);
    });
};

fetchUser(1)
    .then(user => console.log(user))
    .catch(err => console.error(err));

// Promise.all - Ch·∫°y parallel
Promise.all([
    fetch('/api/users'),
    fetch('/api/posts'),
    fetch('/api/comments')
])
.then(([users, posts, comments]) => {
    console.log('All data loaded!');
});

// Promise.race - L·∫•y k·∫øt qu·∫£ nhanh nh·∫•t
Promise.race([
    fetch('/api/server1'),
    fetch('/api/server2')
])
.then(response => console.log('Fastest server responded!'));
\`\`\`

### 7. Async/Await - Promise nh∆∞ng ƒë·∫πp h∆°n

\`\`\`javascript
// ‚úÖ Async/Await - Code nh∆∞ ƒë·ªìng b·ªô
async function fetchUserData() {
    try {
        const response = await fetch('/api/user');
        const user = await response.json();
        
        const postsResponse = await fetch(\`/api/users/\${user.id}/posts\`);
        const posts = await postsResponse.json();
        
        return { user, posts };
    } catch (error) {
        console.error('Error:', error);
        throw error;
    }
}

// Usage
fetchUserData()
    .then(data => console.log(data))
    .catch(err => console.error(err));

// Async/Await with Promise.all
async function loadAllData() {
    const [users, posts, comments] = await Promise.all([
        fetch('/api/users').then(r => r.json()),
        fetch('/api/posts').then(r => r.json()),
        fetch('/api/comments').then(r => r.json())
    ]);
    
    return { users, posts, comments };
}

// Error handling
async function safeAPICall() {
    try {
        const data = await riskyOperation();
        return data;
    } catch (error) {
        if (error.status === 404) {
            return null;
        }
        throw error;  // Re-throw n·∫øu kh√¥ng handle ƒë∆∞·ª£c
    } finally {
        console.log('Cleanup');  // Lu√¥n ch·∫°y
    }
}
\`\`\`

### 8. Modules - Import/Export

\`\`\`javascript
// math.js - Named exports
export const PI = 3.14159;
export const E = 2.71828;

export function add(a, b) {
    return a + b;
}

export class Calculator {
    multiply(a, b) {
        return a * b;
    }
}

// user.js - Default export
export default class User {
    constructor(name) {
        this.name = name;
    }
}

// app.js - Import
import User from './user.js';  // Default import
import { PI, add, Calculator } from './math.js';  // Named imports
import { PI as pi } from './math.js';  // Rename import
import * as MathUtils from './math.js';  // Import all

// Usage
const user = new User('ƒêƒÉng');
console.log(add(2, 3));
console.log(MathUtils.PI);

// Dynamic imports - Load on demand
async function loadModule() {
    const module = await import('./heavy-module.js');
    module.doSomething();
}

// React lazy loading
const HeavyComponent = React.lazy(() => import('./HeavyComponent'));
\`\`\`

### 9. Other Modern Features

\`\`\`javascript
// Default Parameters
function greet(name = 'Guest', greeting = 'Hello') {
    return \`\${greeting}, \${name}!\`;
}

// Optional Chaining (?.)
const city = user?.address?.city ?? 'Unknown';

// Nullish Coalescing (??)
const port = process.env.PORT ?? 3000;

// Array methods
const numbers = [1, 2, 3, 4, 5];
numbers.find(n => n > 3);  // 4
numbers.filter(n => n % 2 === 0);  // [2, 4]
numbers.map(n => n * 2);  // [2, 4, 6, 8, 10]
numbers.reduce((sum, n) => sum + n, 0);  // 15

// Object methods
Object.keys(user);  // ['name', 'age']
Object.values(user);  // ['ƒêƒÉng', 25]
Object.entries(user);  // [['name', 'ƒêƒÉng'], ['age', 25]]

// String methods
'hello'.includes('ll');  // true
'hello'.startsWith('he');  // true
'hello'.endsWith('lo');  // true
'hello'.repeat(3);  // 'hellohellohello'
\`\`\`

### Real-world Example - Modern API Client

\`\`\`javascript
class APIClient {
    constructor(baseURL) {
        this.baseURL = baseURL;
    }
    
    async request(endpoint, { method = 'GET', body, headers = {} } = {}) {
        const url = \`\${this.baseURL}\${endpoint}\`;
        const config = {
            method,
            headers: {
                'Content-Type': 'application/json',
                ...headers
            },
            ...(body && { body: JSON.stringify(body) })
        };
        
        try {
            const response = await fetch(url, config);
            
            if (!response.ok) {
                throw new Error(\`HTTP \${response.status}\`);
            }
            
            return await response.json();
        } catch (error) {
            console.error('API Error:', error);
            throw error;
        }
    }
    
    get(endpoint, options) {
        return this.request(endpoint, { ...options, method: 'GET' });
    }
    
    post(endpoint, body, options) {
        return this.request(endpoint, { ...options, method: 'POST', body });
    }
}

// Usage
const api = new APIClient('https://api.example.com');

async function loadUserPosts(userId) {
    const [user, posts] = await Promise.all([
        api.get(\`/users/\${userId}\`),
        api.get(\`/users/\${userId}/posts\`)
    ]);
    
    return { ...user, posts };
}
\`\`\`

### K·∫øt lu·∫≠n

ES6+ ƒë√£ bi·∫øn JavaScript t·ª´ "toy language" th√†nh m·ªôt trong nh·ªØng ng√¥n ng·ªØ m·∫°nh nh·∫•t:

‚úÖ Modern Syntax: Code ng·∫Øn g·ªçn, d·ªÖ ƒë·ªçc
‚úÖ Async/Await: X·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô nh∆∞ pro
‚úÖ Modules: Code modular, maintainable
‚úÖ Arrow Functions: Gi·∫£i quy·∫øt this binding
‚úÖ Destructuring: Tr√≠ch xu·∫•t data si√™u nhanh

Master ES6+ = Master Modern Web Development! üéØ
    `,
    category: "JavaScript",
    date: "2025-10-10",
    readTime: "18 ph√∫t ƒë·ªçc",
    author: "L√™ H·∫£i ƒêƒÉng",
    featured: true,
  },
  {
    id: 6,
    title: "React Hooks: useState v√† useEffect cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu",
    excerpt:
      "H∆∞·ªõng d·∫´n chi ti·∫øt v·ªÅ React Hooks. C√°ch s·ª≠ d·ª•ng useState ƒë·ªÉ qu·∫£n l√Ω state v√† useEffect ƒë·ªÉ x·ª≠ l√Ω side effects trong functional components.",
    content: `
## React Hooks - Game Changer for React! ‚öõÔ∏è

React Hooks (gi·ªõi thi·ªáu React 16.8) ƒë√£ thay ƒë·ªïi ho√†n to√†n c√°ch vi·∫øt React components. Kh√¥ng c√≤n class components ph·ª©c t·∫°p, gi·ªù ch·ªâ c·∫ßn functional components + Hooks!

### useState - Qu·∫£n l√Ω State

\`\`\`javascript
import { useState } from 'react';

function Counter() {
    // Khai b√°o state
    const [count, setCount] = useState(0);
    //     ‚Üë       ‚Üë           ‚Üë
    //   value  setter   initial value
    
    return (
        <div>
            <p>Count: {count}</p>
            <button onClick={() => setCount(count + 1)}>
                Increment
            </button>
            <button onClick={() => setCount(count - 1)}>
                Decrement
            </button>
            <button onClick={() => setCount(0)}>
                Reset
            </button>
        </div>
    );
}

// Multiple states
function UserForm() {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [age, setAge] = useState(0);
    
    const handleSubmit = (e) => {
        e.preventDefault();
        console.log({ name, email, age });
    };
    
    return (
        <form onSubmit={handleSubmit}>
            <input 
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="Name"
            />
            <input 
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Email"
            />
            <input 
                type="number"
                value={age}
                onChange={(e) => setAge(Number(e.target.value))}
                placeholder="Age"
            />
            <button type="submit">Submit</button>
        </form>
    );
}

// Object state
function Profile() {
    const [user, setUser] = useState({
        name: 'ƒêƒÉng',
        age: 25,
        role: 'Developer'
    });
    
    const updateName = (newName) => {
        setUser({
            ...user,  // Spread existing properties
            name: newName  // Override name
        });
    };
    
    return <div>{user.name}</div>;
}
\`\`\`

### useEffect - Side Effects

\`\`\`javascript
import { useState, useEffect } from 'react';

// 1. Run after every render
useEffect(() => {
    console.log('Component rendered!');
});

// 2. Run once on mount (empty dependency array)
useEffect(() => {
    console.log('Component mounted!');
    
    // Fetch data
    fetchUserData();
}, []);  // ‚Üê Empty array = run once

// 3. Run when dependency changes
function UserProfile({ userId }) {
    const [user, setUser] = useState(null);
    
    useEffect(() => {
        // Fetch user when userId changes
        fetch(\`/api/users/\${userId}\`)
            .then(res => res.json())
            .then(data => setUser(data));
    }, [userId]);  // ‚Üê Re-run khi userId thay ƒë·ªïi
    
    return <div>{user?.name}</div>;
}

// 4. Cleanup function
useEffect(() => {
    const timer = setInterval(() => {
        console.log('Tick');
    }, 1000);
    
    // Cleanup khi component unmount
    return () => {
        clearInterval(timer);
        console.log('Timer cleared!');
    };
}, []);

// 5. Real-world example - WebSocket
function Chat({ roomId }) {
    const [messages, setMessages] = useState([]);
    
    useEffect(() => {
        const ws = new WebSocket(\`ws://localhost:3000/\${roomId}\`);
        
        ws.onmessage = (event) => {
            setMessages(prev => [...prev, event.data]);
        };
        
        // Cleanup - close connection
        return () => {
            ws.close();
        };
    }, [roomId]);  // Reconnect khi roomId thay ƒë·ªïi
    
    return (
        <ul>
            {messages.map((msg, i) => <li key={i}>{msg}</li>)}
        </ul>
    );
}
\`\`\`

### Common Patterns

\`\`\`javascript
// Loading state
function UserList() {
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    
    useEffect(() => {
        fetch('/api/users')
            .then(res => res.json())
            .then(data => {
                setUsers(data);
                setLoading(false);
            })
            .catch(err => {
                setError(err.message);
                setLoading(false);
            });
    }, []);
    
    if (loading) return <div>Loading...</div>;
    if (error) return <div>Error: {error}</div>;
    
    return (
        <ul>
            {users.map(user => <li key={user.id}>{user.name}</li>)}
        </ul>
    );
}

// Toggle state
function Dropdown() {
    const [isOpen, setIsOpen] = useState(false);
    
    const toggle = () => setIsOpen(!isOpen);
    
    return (
        <div>
            <button onClick={toggle}>
                {isOpen ? 'Close' : 'Open'}
            </button>
            {isOpen && <div>Dropdown content</div>}
        </div>
    );
}
\`\`\`

### Rules of Hooks

‚úÖ Ch·ªâ g·ªçi ·ªü top level (kh√¥ng trong loops/conditions)
‚úÖ Ch·ªâ g·ªçi trong React functions (components/custom hooks)

\`\`\`javascript
// ‚ùå WRONG
function Bad() {
    if (condition) {
        const [count, setCount] = useState(0);  // Error!
    }
}

// ‚úÖ CORRECT
function Good() {
    const [count, setCount] = useState(0);
    
    if (condition) {
        // Use count here
    }
}
\`\`\`

Happy Hooking! üé£
    `,
    category: "JavaScript",
    date: "2025-10-08",
    readTime: "12 ph√∫t ƒë·ªçc",
    author: "L√™ H·∫£i ƒêƒÉng",
    featured: false,
  },
  {
    id: 7,
    title: "Node.js Event Loop: C√°ch ho·∫°t ƒë·ªông c·ªßa b·∫•t ƒë·ªìng b·ªô",
    excerpt:
      "Gi·∫£i th√≠ch chi ti·∫øt v·ªÅ Event Loop trong Node.js. Hi·ªÉu r√µ Call Stack, Callback Queue, v√† c√°ch Node.js x·ª≠ l√Ω I/O operations.",
    content: `
## Node.js Event Loop - Single-threaded nh∆∞ng kh√¥ng block! üîÑ

Node.js ch·∫°y JavaScript tr√™n server v·ªõi m·ªôt ƒë·∫∑c ƒëi·ªÉm ƒë·ªôc ƒë√°o: Single-threaded nh∆∞ng v·∫´n handle h√†ng ngh√¨n connections c√πng l√∫c!

B√≠ m·∫≠t n·∫±m ·ªü Event Loop - c∆° ch·∫ø non-blocking I/O si√™u m·∫°nh.

### Event Loop Visualization

\`\`\`
   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îå‚îÄ>‚îÇ           timers          ‚îÇ  setTimeout, setInterval
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  ‚îÇ     pending callbacks     ‚îÇ  I/O callbacks
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  ‚îÇ       idle, prepare       ‚îÇ  Internal use
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  ‚îÇ           poll            ‚îÇ  Retrieve new I/O events
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  ‚îÇ           check           ‚îÇ  setImmediate
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îî‚îÄ‚îÄ‚îÇ      close callbacks      ‚îÇ  socket.on('close', ...)
   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
\`\`\`

### The Stack, Queue, and Loop

\`\`\`javascript
console.log('1. Start');

setTimeout(() => {
    console.log('2. Timeout');
}, 0);

Promise.resolve().then(() => {
    console.log('3. Promise');
});

console.log('4. End');

// Output:
// 1. Start
// 4. End
// 3. Promise  (Microtask queue - higher priority!)
// 2. Timeout  (Macrotask queue)
\`\`\`

Gi·∫£i th√≠ch:
1. Synchronous code ch·∫°y tr∆∞·ªõc (1, 4)
2. Microtasks (Promises) ch·∫°y sau
3. Macrotasks (setTimeout) ch·∫°y cu·ªëi

### Non-blocking I/O

\`\`\`javascript
const fs = require('fs');

// ‚ùå Blocking - Ch·∫∑n to√†n b·ªô app!
const data = fs.readFileSync('large-file.txt');
console.log(data);
console.log('Done');  // Ph·∫£i ƒë·ª£i file ƒë·ªçc xong

// ‚úÖ Non-blocking - App v·∫´n ch·∫°y!
fs.readFile('large-file.txt', (err, data) => {
    if (err) throw err;
    console.log(data);
});
console.log('Done');  // Ch·∫°y ngay l·∫≠p t·ª©c!
// Output: Done ‚Üí file content
\`\`\`

### Callback Hell ‚Üí Promises ‚Üí Async/Await

\`\`\`javascript
// üò± Callback Hell
getUser(userId, (err, user) => {
    if (err) return handleError(err);
    getPosts(user.id, (err, posts) => {
        if (err) return handleError(err);
        getComments(posts[0].id, (err, comments) => {
            if (err) return handleError(err);
            console.log(comments);
        });
    });
});

// üòä Promises
getUser(userId)
    .then(user => getPosts(user.id))
    .then(posts => getComments(posts[0].id))
    .then(comments => console.log(comments))
    .catch(handleError);

// üöÄ Async/Await (Best!)
async function loadData() {
    try {
        const user = await getUser(userId);
        const posts = await getPosts(user.id);
        const comments = await getComments(posts[0].id);
        console.log(comments);
    } catch (err) {
        handleError(err);
    }
}
\`\`\`

### Event Emitters

\`\`\`javascript
const EventEmitter = require('events');

class Server extends EventEmitter {
    start() {
        this.emit('started', { port: 3000 });
    }
    
    stop() {
        this.emit('stopped');
    }
}

const server = new Server();

server.on('started', (info) => {
    console.log(\`Server started on port \${info.port}\`);
});

server.on('stopped', () => {
    console.log('Server stopped');
});

server.start();  // "Server started on port 3000"
\`\`\`

### Worker Threads - True Parallelism

\`\`\`javascript
const { Worker } = require('worker_threads');

// CPU-intensive task in separate thread
const worker = new Worker('./heavy-task.js');

worker.on('message', (result) => {
    console.log('Result:', result);
});

worker.postMessage({ data: 'process this' });
\`\`\`

### Performance Tips

‚úÖ Avoid blocking operations
‚úÖ Use async/await for clarity
‚úÖ Worker threads for CPU tasks
‚úÖ Cluster for multi-core CPUs

Event Loop = Node.js Superpower! ‚ö°
    `,
    category: "JavaScript",
    date: "2025-10-05",
    readTime: "10 ph√∫t ƒë·ªçc",
    author: "L√™ H·∫£i ƒêƒÉng",
    featured: false,
  },
  {
    id: 8,
    title: "TypeScript: T·∫°i sao b·∫°n n√™n s·ª≠ d·ª•ng trong d·ª± √°n JavaScript",
    excerpt:
      "Kh√°m ph√° l·ª£i √≠ch c·ªßa TypeScript - JavaScript v·ªõi type safety. C·∫£i thi·ªán code quality v√† developer experience v·ªõi static typing.",
    content: `
## TypeScript - JavaScript on Steroids üí™

TypeScript = JavaScript + Types. Nghe ƒë∆°n gi·∫£n nh∆∞ng impact c·ª±c l·ªõn! Microsoft t·∫°o ra TypeScript ƒë·ªÉ gi·∫£i quy·∫øt pain points c·ªßa JavaScript trong large-scale applications.

Fact: H∆°n 60% JavaScript projects m·ªõi b·∫Øt ƒë·∫ßu v·ªõi TypeScript!

### Why TypeScript?

1. Type Safety - B·∫Øt l·ªói s·ªõm
\`\`\`typescript
// ‚ùå JavaScript - L·ªói runtime
function add(a, b) {
    return a + b;
}
add(5, "10");  // "510" - Bug!

// ‚úÖ TypeScript - L·ªói compile time
function add(a: number, b: number): number {
    return a + b;
}
add(5, "10");  // ‚ùå Error: string not assignable to number
\`\`\`

2. IntelliSense - Autocomplete tuy·ªát v·ªùi
\`\`\`typescript
interface User {
    id: number;
    name: string;
    email: string;
    role: 'admin' | 'user';
}

const user: User = {
    id: 1,
    name: 'ƒêƒÉng',
    email: 'dang@example.com',
    role: 'admin'
};

// IDE t·ª± ƒë·ªông suggest: user.id, user.name, user.email, user.role
console.log(user.  // ‚Üê Autocomplete!
\`\`\`

3. Refactoring an to√†n
- ƒê·ªïi t√™n variable/function ‚Üí t·ª± ƒë·ªông update t·∫•t c·∫£
- Compiler b√°o l·ªói n·∫øu c√≥ ch·ªó n√†o b·ªã miss

### Basic Types

\`\`\`typescript
// Primitives
let age: number = 25;
let name: string = "ƒêƒÉng";
let isDeveloper: boolean = true;

// Arrays
let numbers: number[] = [1, 2, 3];
let names: Array<string> = ["ƒêƒÉng", "Nam"];

// Objects
let user: {
    name: string;
    age: number;
} = {
    name: "ƒêƒÉng",
    age: 25
};

// Functions
function greet(name: string): string {
    return \`Hello, \${name}\`;
}

// Optional parameters
function log(message: string, userId?: number) {
    console.log(message, userId);
}

// Union types
let id: string | number = "123";
id = 456;  // OK!

// Literal types
let role: 'admin' | 'user' | 'guest' = 'admin';
role = 'moderator';  // ‚ùå Error!
\`\`\`

### Interfaces

\`\`\`typescript
interface Product {
    id: number;
    name: string;
    price: number;
    category?: string;  // Optional
    readonly createdAt: Date;  // Readonly
}

const product: Product = {
    id: 1,
    name: "Laptop",
    price: 1000,
    createdAt: new Date()
};

// product.createdAt = new Date();  // ‚ùå Error: readonly
\`\`\`

### Type Aliases

\`\`\`typescript
type ID = string | number;
type User = {
    id: ID;
    name: string;
    email: string;
};

type Response<T> = {
    data: T;
    error?: string;
    status: number;
};

const userResponse: Response<User> = {
    data: { id: 1, name: "ƒêƒÉng", email: "test@test.com" },
    status: 200
};
\`\`\`

### Generics

\`\`\`typescript
// Generic function
function identity<T>(value: T): T {
    return value;
}

identity<string>("hello");  // string
identity<number>(42);  // number

// Generic interface
interface ApiResponse<T> {
    data: T;
    status: number;
}

const userResponse: ApiResponse<User> = {
    data: { id: 1, name: "ƒêƒÉng", email: "test@test.com" },
    status: 200
};

// Generic class
class DataStore<T> {
    private items: T[] = [];
    
    add(item: T): void {
        this.items.push(item);
    }
    
    get(index: number): T {
        return this.items[index];
    }
}

const numberStore = new DataStore<number>();
numberStore.add(42);
\`\`\`

### React with TypeScript

\`\`\`typescript
import React from 'react';

interface Props {
    name: string;
    age: number;
    onSubmit: (data: FormData) => void;
}

const UserCard: React.FC<Props> = ({ name, age, onSubmit }) => {
    const [count, setCount] = React.useState<number>(0);
    
    return (
        <div>
            <h2>{name}</h2>
            <p>Age: {age}</p>
            <p>Count: {count}</p>
            <button onClick={() => setCount(count + 1)}>
                Increment
            </button>
        </div>
    );
};
\`\`\`

### Utility Types

\`\`\`typescript
interface User {
    id: number;
    name: string;
    email: string;
    password: string;
}

// Pick - Ch·ªçn m·ªôt s·ªë properties
type PublicUser = Pick<User, 'id' | 'name' | 'email'>;

// Omit - Lo·∫°i b·ªè properties
type UserWithoutPassword = Omit<User, 'password'>;

// Partial - T·∫•t c·∫£ properties optional
type PartialUser = Partial<User>;

// Required - T·∫•t c·∫£ properties required
type RequiredUser = Required<User>;

// Readonly - T·∫•t c·∫£ properties readonly
type ReadonlyUser = Readonly<User>;
\`\`\`

### Khi n√†o d√πng TypeScript?

‚úÖ Large projects (>10k LOC)
‚úÖ Team projects (multiple developers)
‚úÖ Long-term maintenance
‚úÖ Complex business logic
‚úÖ Library/Framework development

‚ùå Prototypes (qu√° n·∫∑ng)
‚ùå Simple scripts (overkill)
‚ùå Learning JavaScript (h·ªçc JS tr∆∞·ªõc)

### Migration t·ª´ JavaScript

\`\`\`bash
# 1. Rename .js ‚Üí .ts
mv app.js app.ts

# 2. Install TypeScript
npm install -D typescript @types/node @types/react

# 3. Create tsconfig.json
npx tsc --init

# 4. Gradually add types
// Start with 'any', then improve
\`\`\`

TypeScript = Better JavaScript for serious projects! üéØ
    `,
    category: "JavaScript",
    date: "2025-10-02",
    readTime: "14 ph√∫t ƒë·ªçc",
    author: "L√™ H·∫£i ƒêƒÉng",
    featured: false,
  },

  // Comparison Post
  {
    id: 9,
    title: "Java vs JavaScript: So s√°nh chi ti·∫øt v√† khi n√†o n√™n d√πng",
    excerpt:
      "Ph√¢n t√≠ch s√¢u s·∫Øc s·ª± kh√°c bi·ªát gi·ªØa Java v√† JavaScript. T·ª´ syntax, ecosystem ƒë·∫øn use cases. Gi√∫p b·∫°n ch·ªçn ng√¥n ng·ªØ ph√π h·ª£p cho d·ª± √°n.",
    content: `
## Java vs JavaScript: Battle of the Giants ü•ä

Nhi·ªÅu ng∆∞·ªùi nh·∫ßm l·∫´n r·∫±ng Java v√† JavaScript c√≥ li√™n quan v·ªõi nhau v√¨ t√™n gi·ªëng nhau. S·ª± th·∫≠t l√†: Ch√∫ng kh√°c bi·ªát ho√†n to√†n! Gi·ªëng nh∆∞ Car v√† Carpet ch·ªâ gi·ªëng nhau ·ªü ch·ªØ "Car" v·∫≠y.

H√£y ph√¢n t√≠ch chi ti·∫øt s·ª± kh√°c bi·ªát v√† khi n√†o n√™n d√πng ng√¥n ng·ªØ n√†o.

### L·ªãch s·ª≠ v√† Ngu·ªìn g·ªëc

Java (1995 - Sun Microsystems/Oracle)
- T·∫°o b·ªüi James Gosling t·∫°i Sun Microsystems
- Ban ƒë·∫ßu t√™n "Oak", sau ƒë·ªïi th√†nh Java (ƒë·∫£o ·ªü Indonesia)
- M·ª•c ti√™u: "Write Once, Run Anywhere" - ƒë·ªôc l·∫≠p n·ªÅn t·∫£ng
- Ng√¥n ng·ªØ OOP thu·∫ßn t√∫y cho enterprise
- Slogan: ‚òï "Java: The power of simplicity"

JavaScript (1995 - Netscape)
- T·∫°o b·ªüi Brendan Eich ch·ªâ trong 10 ng√†y!
- Ban ƒë·∫ßu t√™n "Mocha" ‚Üí "LiveScript" ‚Üí "JavaScript" (marketing!)
- ƒê·∫∑t t√™n "JavaScript" ƒë·ªÉ l·ª£i d·ª•ng s·ª± n·ªïi ti·∫øng c·ªßa Java
- Ng√¥n ng·ªØ scripting cho tr√¨nh duy·ªát web
- Slogan: üöÄ "JavaScript: The language of the web"

### 1. Type System - S·ª± kh√°c bi·ªát c·ªët l√µi

Java - Strongly Typed & Static Typing

\`\`\`java
// Ph·∫£i khai b√°o type r√µ r√†ng
String name = "H·∫£i ƒêƒÉng";
int age = 25;
double salary = 50000.50;

// ‚ùå Compile Error - Type mismatch
// age = "hai lƒÉm";  // ERROR!
// salary = "nƒÉm m∆∞∆°i ngh√¨n";  // ERROR!

// Type checking l√∫c compile time
public int calculateAge(Date birthDate) {
    // Compiler bi·∫øt return type l√† int
    return 25;
}

// Generics - Type safe collections
List<String> names = new ArrayList<>();
names.add("ƒêƒÉng");
// names.add(123);  // ‚ùå Compile error!

String first = names.get(0);  // Kh√¥ng c·∫ßn cast
\`\`\`

JavaScript - Weakly Typed & Dynamic Typing

\`\`\`javascript
// Kh√¥ng c·∫ßn khai b√°o type
let name = "H·∫£i ƒêƒÉng";
let age = 25;
let salary = 50000.50;

// ‚úÖ OK - Type c√≥ th·ªÉ thay ƒë·ªïi runtime
age = "hai lƒÉm";  // OK!
salary = "nƒÉm m∆∞∆°i ngh√¨n";  // OK!

// Type checking l√∫c runtime
function calculateAge(birthDate) {
    // C√≥ th·ªÉ return b·∫•t k·ª≥ type n√†o
    return 25;  // number
    // return "25";  // OK - string
    // return { age: 25 };  // OK - object
}

// Coercion - T·ª± ƒë·ªông convert type (ƒë√¥i khi weird!)
console.log("5" + 3);  // "53" (string concat)
console.log("5" - 3);  // 2 (number subtraction) 
console.log(true + 1);  // 2 (true = 1)
console.log([] + {});  // "[object Object]" ü§Ø
\`\`\`

So s√°nh:
| Kh√≠a c·∫°nh | Java | JavaScript |
|-----------|------|------------|
| Type checking | Compile time | Runtime |
| L·ªói type | Ph√°t hi·ªán s·ªõm | Ph√°t hi·ªán khi ch·∫°y |
| Type safety | Cao | Th·∫•p (TypeScript gi·∫£i quy·∫øt) |
| Flexibility | Th·∫•p | Cao |

### 2. Paradigm - M√¥ h√¨nh l·∫≠p tr√¨nh

Java - Pure Object-Oriented Programming

\`\`\`java
// M·ªçi th·ª© ph·∫£i trong class
public class User {
    // Properties
    private String name;
    private int age;
    
    // Constructor
    public User(String name, int age) {
        this.name = name;
        this.age = age;
    }
    
    // Methods
    public void greet() {
        System.out.println("Hello, " + name);
    }
    
    // Getters/Setters
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
}

// Class-based inheritance
public class Developer extends User {
    private String language;
    
    public Developer(String name, int age, String language) {
        super(name, age);
        this.language = language;
    }
}

// Interface implementation
public interface Programmable {
    void code();
    void debug();
}

// Kh√¥ng th·ªÉ c√≥ function ƒë·ªôc l·∫≠p - ph·∫£i trong class!
\`\`\`

JavaScript - Multi-Paradigm (OOP + Functional + Procedural)

\`\`\`javascript
// 1. Procedural - Functions ƒë·ªôc l·∫≠p
function greet(name) {
    console.log("Hello, " + name);
}

// 2. OOP - Prototype-based
function User(name, age) {
    this.name = name;
    this.age = age;
}

User.prototype.greet = function() {
    console.log("Hello, " + this.name);
};

// ES6 Classes (syntactic sugar over prototypes)
class Developer extends User {
    constructor(name, age, language) {
        super(name, age);
        this.language = language;
    }
    
    code() {
        console.log(\`Coding in \${this.language}\`);
    }
}

// 3. Functional Programming
const numbers = [1, 2, 3, 4, 5];

// Higher-order functions
const doubled = numbers.map(n => n * 2);
const evens = numbers.filter(n => n % 2 === 0);
const sum = numbers.reduce((acc, n) => acc + n, 0);

// Pure functions
const add = (a, b) => a + b;  // No side effects

// Closures
function counter() {
    let count = 0;
    return {
        increment: () => ++count,
        get: () => count
    };
}

// First-class functions
const operation = (a, b, fn) => fn(a, b);
operation(5, 3, add);  // 8
operation(5, 3, (x, y) => x * y);  // 15
\`\`\`

### 3. Compilation vs Interpretation

Java - Compiled Language

\`\`\`
Source Code (.java)
    ‚Üì
Compiler (javac)
    ‚Üì
Bytecode (.class)
    ‚Üì
JVM (Just-In-Time Compiler)
    ‚Üì
Machine Code
    ‚Üì
Execution
\`\`\`

∆Øu ƒëi·ªÉm:
‚úÖ Ph√°t hi·ªán l·ªói s·ªõm (compile time)
‚úÖ Performance t·ªët (JIT optimization)
‚úÖ Type safety
‚úÖ Refactoring d·ªÖ d√†ng

Nh∆∞·ª£c ƒëi·ªÉm:
‚ùå Compile step l√†m ch·∫≠m development
‚ùå Code d√†i d√≤ng h∆°n
‚ùå Kh√≥ debug bytecode

JavaScript - Interpreted/JIT Compiled

\`\`\`
Source Code (.js)
    ‚Üì
Parser
    ‚Üì
Abstract Syntax Tree (AST)
    ‚Üì
JIT Compiler (V8, SpiderMonkey)
    ‚Üì
Execution
\`\`\`

∆Øu ƒëi·ªÉm:
‚úÖ Rapid development (kh√¥ng c·∫ßn compile)
‚úÖ Dynamic typing - linh ho·∫°t
‚úÖ Easy debugging trong browser
‚úÖ Hot reloading

Nh∆∞·ª£c ƒëi·ªÉm:
‚ùå L·ªói ph√°t hi·ªán l√∫c runtime
‚ùå Performance th·∫•p h∆°n Java (nh∆∞ng V8 r·∫•t nhanh)
‚ùå Kh√≥ maintain d·ª± √°n l·ªõn (TypeScript gi·∫£i quy·∫øt)

### 4. Concurrency Model - X·ª≠ l√Ω ƒë·ªìng th·ªùi

Java - Multi-threading & Shared Memory

\`\`\`java
// Traditional Threads
public class Counter {
    private int count = 0;
    
    // Synchronized - prevent race conditions
    public synchronized void increment() {
        count++;
    }
    
    public static void main(String[] args) {
        Counter counter = new Counter();
        
        // Create 10 threads
        Thread[] threads = new Thread[10];
        for (int i = 0; i < 10; i++) {
            threads[i] = new Thread(() -> {
                for (int j = 0; j < 1000; j++) {
                    counter.increment();
                }
            });
            threads[i].start();
        }
        
        // Wait for all threads
        for (Thread t : threads) {
            t.join();
        }
        
        System.out.println("Count: " + counter.count);  // 10000
    }
}

// ExecutorService - Thread Pool
ExecutorService executor = Executors.newFixedThreadPool(4);

for (int i = 0; i < 10; i++) {
    executor.submit(() -> {
        // Heavy task
        processData();
    });
}

executor.shutdown();

// CompletableFuture - Async programming
CompletableFuture.supplyAsync(() -> fetchFromAPI())
    .thenApply(data -> processData(data))
    .thenAccept(result -> saveToDatabase(result));

// Virtual Threads (Java 21+) - Lightweight
try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
    for (int i = 0; i < 1_000_000; i++) {
        executor.submit(() -> handleRequest());  // 1M threads!
    }
}
\`\`\`

JavaScript - Single-threaded & Event Loop

\`\`\`javascript
// Event Loop - Non-blocking I/O
console.log("1. Start");

setTimeout(() => {
    console.log("2. Timeout");
}, 0);

Promise.resolve().then(() => {
    console.log("3. Promise");
});

console.log("4. End");

// Output: 1. Start ‚Üí 4. End ‚Üí 3. Promise ‚Üí 2. Timeout

// Async/Await - Non-blocking
async function fetchUserData() {
    console.log("Start fetching...");
    
    const user = await fetch('/api/user');  // Non-blocking!
    const posts = await fetch(\`/api/users/\${user.id}/posts\`);
    
    return { user, posts };
}

// Promise.all - Parallel execution
const [users, posts, comments] = await Promise.all([
    fetch('/api/users'),
    fetch('/api/posts'),
    fetch('/api/comments')
]);

// Worker Threads (Node.js) - True parallelism
const { Worker } = require('worker_threads');

const worker = new Worker('./heavy-task.js');
worker.on('message', (result) => {
    console.log('Result:', result);
});

// Web Workers (Browser)
const worker = new Worker('worker.js');
worker.postMessage({ data: 'Process this' });
worker.onmessage = (e) => {
    console.log('Result:', e.data);
};
\`\`\`

So s√°nh Concurrency:
| Java | JavaScript |
|------|------------|
| Multi-threaded | Single-threaded |
| Shared memory | Event loop |
| Threads, Locks | Callbacks, Promises |
| CPU-bound tasks | I/O-bound tasks |
| Complex ƒë·ªÉ handle race conditions | ƒê∆°n gi·∫£n h∆°n (no shared state) |

### 5. Performance Comparison

Benchmark - Fibonacci(40)

\`\`\`java
// Java
public static int fib(int n) {
    if (n <= 1) return n;
    return fib(n - 1) + fib(n - 2);
}
// Time: ~0.5s
\`\`\`

\`\`\`javascript
// JavaScript (Node.js)
function fib(n) {
    if (n <= 1) return n;
    return fib(n - 1) + fib(n - 2);
}
// Time: ~1.2s
\`\`\`

K·∫øt qu·∫£:
- CPU-intensive tasks: Java nhanh h∆°n 2-3x
- I/O operations: JavaScript nhanh h∆°n (non-blocking)
- Startup time: JavaScript nhanh h∆°n (no JVM warmup)
- Memory: Java t·ªët h∆°n cho large datasets

### 6. Ecosystem & Frameworks

Java Ecosystem

\`\`\`
Build Tools:
- Maven (dependency management)
- Gradle (modern, fast)

Frameworks:
- Spring Boot (microservices, REST API)
- Hibernate (ORM)
- Jakarta EE (enterprise)
- Quarkus (cloud-native)

Testing:
- JUnit 5
- Mockito
- TestContainers

Deployment:
- Docker
- Kubernetes
- Tomcat, Jetty
\`\`\`

JavaScript Ecosystem

\`\`\`
Package Managers:
- npm (largest package registry)
- yarn (faster, reliable)
- pnpm (disk efficient)

Frontend Frameworks:
- React (most popular)
- Vue (easiest to learn)
- Angular (full-featured)
- Svelte (no virtual DOM)

Backend Frameworks:
- Express (minimalist)
- NestJS (TypeScript, Angular-like)
- Fastify (fastest)
- Koa (modern)

Testing:
- Jest
- Mocha + Chai
- Cypress (E2E)

Build Tools:
- Webpack
- Vite (super fast)
- Rollup
\`\`\`

### 7. Use Cases - Khi n√†o d√πng g√¨?

Java - Best for:

‚úÖ Enterprise Applications
\`\`\`java
@SpringBootApplication
public class BankingApplication {
    // X√¢y d·ª±ng h·ªá th·ªëng ng√¢n h√†ng v·ªõi:
    // - High security
    // - Transaction management
    // - Data consistency
    // - Scalability
}
\`\`\`

‚úÖ Android Development
- 2.5 t·ª∑ thi·∫øt b·ªã Android
- Kotlin (ch·∫°y tr√™n JVM) - official language
- Native performance

‚úÖ Big Data
- Hadoop: Distributed storage & processing
- Spark: Real-time analytics
- Kafka: Event streaming

‚úÖ Trading Systems
- Low latency
- High throughput
- Reliability

JavaScript - Best for:

‚úÖ Web Development (Frontend)
\`\`\`javascript
// React Component
function ProductCard({ product }) {
    return (
        <div className="card">
            <h3>{product.name}</h3>
            <p>\${product.price}</p>
            <button onClick={() => addToCart(product)}>
                Add to Cart
            </button>
        </div>
    );
}
\`\`\`

‚úÖ Backend (Node.js)
- RESTful APIs
- Real-time apps (Socket.io)
- Microservices
- Server-side rendering

‚úÖ Full-stack Development
- MERN Stack (MongoDB, Express, React, Node)
- Next.js (React framework)
- M·ªôt ng√¥n ng·ªØ cho c·∫£ frontend + backend

‚úÖ Real-time Applications
- Chat applications
- Live dashboards
- Online gaming
- Collaboration tools

### 8. Learning Curve

Java:
- üìö Cao h∆°n: Ph·∫£i h·ªçc OOP concepts, type system, JVM
- ‚è∞ Th·ªùi gian: 6-12 th√°ng ƒë·ªÉ th√†nh th·∫°o
- üéØ Suitable for: Ng∆∞·ªùi mu·ªën hi·ªÉu s√¢u computer science
- üíº Job market: Enterprise, big companies

JavaScript:
- üìö Th·∫•p h∆°n: Syntax ƒë∆°n gi·∫£n, flexible
- ‚è∞ Th·ªùi gian: 3-6 th√°ng ƒë·ªÉ b·∫Øt ƒë·∫ßu l√†m vi·ªác
- üéØ Suitable for: Rapid prototyping, web dev
- üíº Job market: Startups, web agencies, full-stack

### 9. Salary Comparison (Vietnam - 2025)

Java Developer:
- Fresher: 8-15 tri·ªáu VNƒê
- Junior (1-2 nƒÉm): 15-25 tri·ªáu
- Middle (2-4 nƒÉm): 25-40 tri·ªáu
- Senior (4+ nƒÉm): 40-80 tri·ªáu

JavaScript Developer:
- Fresher: 8-12 tri·ªáu VNƒê
- Junior (1-2 nƒÉm): 12-20 tri·ªáu
- Middle (2-4 nƒÉm): 20-35 tri·ªáu
- Senior (4+ nƒÉm): 35-70 tri·ªáu

Full-stack (Java + JavaScript):
- Middle: 30-45 tri·ªáu
- Senior: 50-100 tri·ªáu üí∞

### B·∫£ng so s√°nh t·ªïng h·ª£p

| Ti√™u ch√≠ | Java ‚òï | JavaScript üöÄ |
|----------|---------|---------------|
| Type System | Static, Strong | Dynamic, Weak |
| Paradigm | OOP | Multi-paradigm |
| Platform | JVM (cross-platform) | Browser + Node.js |
| Concurrency | Multi-threading | Event loop |
| Performance | Cao (CPU tasks) | Cao (I/O tasks) |
| Startup Time | Ch·∫≠m (JVM warmup) | Nhanh |
| Learning Curve | Cao | Trung b√¨nh |
| Ecosystem | Mature, stable | Fast-paced |
| Mobile | Android native | React Native |
| Best For | Enterprise, Backend | Web, Full-stack |
| Salary | Cao h∆°n | Trung b√¨nh |
| Job Openings | Nhi·ªÅu (enterprise) | R·∫•t nhi·ªÅu (web) |

### K·∫øt lu·∫≠n: N√™n h·ªçc ng√¥n ng·ªØ n√†o?

Ch·ªçn Java n·∫øu b·∫°n:
‚úÖ Mu·ªën l√†m vi·ªác cho c√¥ng ty l·ªõn, ng√¢n h√†ng
‚úÖ Th√≠ch code c√≥ structure r√µ r√†ng
‚úÖ Quan t√¢m ƒë·∫øn type safety
‚úÖ L√†m Android development
‚úÖ Mu·ªën hi·ªÉu s√¢u OOP v√† computer science

Ch·ªçn JavaScript n·∫øu b·∫°n:
‚úÖ Mu·ªën tr·ªü th√†nh web developer
‚úÖ Th√≠ch rapid development
‚úÖ L√†m freelance ho·∫∑c startup
‚úÖ Mu·ªën l√†m full-stack v·ªõi 1 ng√¥n ng·ªØ
‚úÖ Quan t√¢m ƒë·∫øn frontend + UI/UX

L·ªùi khuy√™n c·ªßa m√¨nh:

üí° H·ªçc C·∫¢ HAI!

1. B·∫Øt ƒë·∫ßu v·ªõi JavaScript:
   - D·ªÖ h·ªçc h∆°n
   - Th·∫•y k·∫øt qu·∫£ nhanh (UI tr√™n browser)
   - Job openings nhi·ªÅu

2. Sau ƒë√≥ h·ªçc Java:
   - Hi·ªÉu s√¢u OOP principles
   - Type system gi√∫p code quality t·ªët h∆°n
   - M·ªü ra c∆° h·ªôi enterprise

3. K·∫øt h·ª£p c·∫£ hai:
   - Backend: Java Spring Boot
   - Frontend: React/Vue
   - Become Full-stack Engineer!

Quan tr·ªçng nh·∫•t: Kh√¥ng c√≥ ng√¥n ng·ªØ n√†o "t·ªët nh·∫•t". M·ªói ng√¥n ng·ªØ c√≥ ƒëi·ªÉm m·∫°nh ri√™ng. Master fundamentals (algorithms, data structures, design patterns) quan tr·ªçng h∆°n ng√¥n ng·ªØ c·ª• th·ªÉ!

Happy coding! üöÄ‚òï
    `,
    category: "Comparison",
    date: "2025-10-01",
    readTime: "20 ph√∫t ƒë·ªçc",
    author: "L√™ H·∫£i ƒêƒÉng",
    featured: true,
  },
];
